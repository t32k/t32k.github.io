<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css on MOL</title>
    <link>http://localhost:1313/mol/categories/css/</link>
    <description>Recent content in Css on MOL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <lastBuildDate>Thu, 05 Dec 2013 00:00:00 UTC</lastBuildDate>
    <atom:link href="http://localhost:1313/mol/categories/css/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CSSを書くために必要なGruntプルギン集！！</title>
      <link>http://localhost:1313/mol/log/modern-coder/</link>
      <pubDate>Thu, 05 Dec 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/modern-coder/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://t32k.me/mol/log/modern-development-workflow-with-grunt/&#34;&gt;前回の続きというかセッション&lt;/a&gt;では基本的な使い方とMapleの説明に終始したので、今回は僕が普段CSS書いてる時に便利だなーと思うプラグインを列挙してみたよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t32k/items/193c82e04e5383ead38f&#34;&gt;高いCSS圧縮率を誇るgrunt-cssoについて紹介するよ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t32k/items/e59cebb51825347689f9&#34;&gt;CSSプロパティをソートしてくれるgrunt-csscombについて紹介するよ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t32k/items/9e03e80061de21411765&#34;&gt;CSS - イケてるスタイルガイドを簡単に作れるgrunt-kssについて紹介するよ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t32k/items/f2de0e934cf5e6d66058&#34;&gt;CSS書く人なら絶対入れとけのgrunt-contrib-csslintについて紹介するよ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t32k/items/ba9e213d0253e369bf2e&#34;&gt;CSSプロパティの重複を解析してくれるgrunt-csscssについて紹介するよ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t32k/items/a94820ceabd008243e8d&#34;&gt;そのページで使われているCSSだけまとめてくれるgrunt-uncssについて紹介するよ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;僕はCSS書きなのでCSSに関するプラグインが多いけど、&lt;strong&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2013/grunt-plugins&#34;&gt;Grunt Plugins Advent Calendar 2013 - Qiita&lt;/a&gt;&lt;/strong&gt;の他の参加者も便利なプラグインを紹介してるので見てみてね。&lt;/p&gt;

&lt;p&gt;あとなぜか、このアドベントカレンダーだけ時空の法則が乱れてて12/15（現在：12/5）まで進んでるからいっぱい見れるね♪&lt;/p&gt;

&lt;p&gt;僕のお気に入りGruntプルギンは&lt;a href=&#34;http://qiita.com/shoito/items/aed36f56ae9a3e46c215&#34;&gt;@shoitoも書いているgrunt-pagespeed&lt;/a&gt;です！てか、PageSpeedが好きなんですけどね！！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ぼくのかんがえたさいきょうのしーえしゅえしゅ</title>
      <link>http://localhost:1313/mol/log/the-perfect-css-i-thought/</link>
      <pubDate>Mon, 29 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/the-perfect-css-i-thought/</guid>
      <description>

&lt;p&gt;俺ももう30だし、夏なんで、CSSフレームワークはじめました。
とりあえず、UIエレメントとか作ってないし、CSSフレームワークとか言いながら、GithubのLanguage Staticsは98.3%、JavaScriptってな感じでGrunt Taskばかり充実してるような感じです、現状。&lt;/p&gt;

&lt;p&gt;とりあえず、設計方針としてはマシなCSSを書くことを目標としている。この一年、スマホアプリのHTML/CSSコーディングをやってきたわけだが、度重なるUIの変更に耐えうるCSS、そして肥大化しないCSSとは何かずっと考えていて、特に答えという答えもで見つかっていわけだけど、とりあえずはこうしたほうがBetterなんじゃないかというの自分的に固まってきたので、公開してみた。&lt;/p&gt;

&lt;p&gt;てか、最強のCSSなんて存在しないからなっ！！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/t32k/maple&#34;&gt;t32k/maple - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ありがちな落とし穴:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;ありがちな落とし穴&lt;/h2&gt;

&lt;p&gt;これを作るにあたって社内のほかのプロジェクトのCSSがどんな風に書いてるのか調べった結果、以下の点が気になった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;無用な Vendor Prefixes&lt;/li&gt;
&lt;li&gt;Data URI 多用&lt;/li&gt;
&lt;li&gt;Nest が深い&lt;/li&gt;
&lt;li&gt;@extend 多用&lt;/li&gt;
&lt;li&gt;ID セレクタ使用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;無用な-vendor-prefixes:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;無用な Vendor Prefixes&lt;/h3&gt;

&lt;p&gt;基本、我々はWebkitをターゲットとしたWebアプリを作ってるので、-moz-とか、-ms-とかいらないはずなんだけど、なんか付いている・・・多分、CompassのCSS3 Mixinとか使ってると、デフォルトで全部のベンダープレフィックスが吐出されてしまうので、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$experimental-support-for-opera: false;
$experimental-support-for-mozilla: false;
$experimental-support-for-microsoft: false;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そういったものを吐き出さないように、変数で指定する必要がある。また&lt;code&gt;-webkit-border-radius&lt;/code&gt;のようにAndroid2.3+, iOS4.3+のバージョンをターゲットとしているのであれば、この場合のベンダープレフィックスは不要だ。どのバージョンからベンダープレフィックスが必要か、必要でないかは&lt;a href=&#34;http://caniuse.com/#search=border-ra&#34;&gt;Can I use…&lt;/a&gt;で調べればよい（逆に正規プロパティを書いてないとこもあった）。&lt;/p&gt;

&lt;h3 id=&#34;data-uri-多用:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;Data URI 多用&lt;/h3&gt;

&lt;p&gt;WebパフォーマンスにおいてHTTPリクエストを削減することは真っ先に優先されるべきことだが、あまり何でもかんでも画像をDataURI化してCSSファイルの中に記述してしまうと、CSSファイルの肥大化が問題になってしまう。CSSファイルがパースされなければレンダリングが始まらないのでCSSファイルの肥大化は絶対に避けなければならない。画像の1KBとCSSファイルの1KBを同じように考えてはいけない。&lt;/p&gt;

&lt;p&gt;ましてやDataURI化すれば元の画像の2,3割ファイルサイズが増えるし、&lt;a href=&#34;http://t32k.me/mol/log/data-uri-scheme/&#34;&gt;仕様的にあまり大きなファイルサイズのものに適用してしまうのは気をつけたほうがいい&lt;/a&gt;。私の場合はログインページなど一回しか出てこないような場面において使うアイコン画像などをHTML内に埋め込んでいる。何回でも出てくるような画像であればCSSスプライトしたほうが無難だ。&lt;/p&gt;

&lt;h3 id=&#34;nestが深い:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;Nestが深い&lt;/h3&gt;

&lt;p&gt;ロケーションに基づいたスタイル付け、ページに基づいたCSSを書いていくと当然ネストが深くなっていく（ex. body.login-page a.login-btn &amp;gt; span）。ここではセレクタの数が増えることによるファイルサイズ増量が問題というわけでなく、詳細度が高まれば高まるほど、そこでしか使用できないセレクタになってしまうことが問題だ。結果、同じようなスタイルでも新しくCSSを記述しなければならずファイルサイズが増えていくことになる。&lt;/p&gt;

&lt;p&gt;これらの解決策はできるだけ小さなモジュールに基づいてスタイル付けしていくことだ。基本、ネストは&lt;strong&gt;3レベル&lt;/strong&gt;までが許容値だ。&lt;/p&gt;

&lt;h3 id=&#34;extend-多用:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;@extend 多用&lt;/h3&gt;

&lt;p&gt;@extendは素晴らしい機能だと思うが、あまりカジュアルに使用してしまえば、セレクタの増加につながる。マルチクラス（&amp;rdquo;class=&amp;ldquo;btn btn-primary&amp;rdquo;）でマークアップすれば基本的に代用できる機能だ。確かに、CSSファイル内で.btnを@extendして.btn-primaryを作ればclass=&amp;ldquo;btn-primary&amp;rdquo;だけになって簡潔だが、それ以上の意味は無い。ただいたずらに使えばCSSファイルが増えるだけなので、マルチクラスの使用を推奨する。&lt;/p&gt;

&lt;h3 id=&#34;id-セレクタ使用:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;ID セレクタ使用&lt;/h3&gt;

&lt;p&gt;CSSのスタイル付けにおいてIDセレクタを使用しなければならない理由などない。それどころかIDを使えば詳細度が複雑になり、このスタイルを上書きするためにさらにIDを使用したりなど、チキンレースが始まり、結果ファイルサイズが肥大化する。HTML内でJSのフックとして id=&amp;ldquo;js-getElement&amp;rdquo;など使用するのは問題ないが、そのセレクタに対してスタイルをつけてはならない。&lt;/p&gt;

&lt;p&gt;まぁ、そんな感じのことを考えつつ作りました。&lt;/p&gt;

&lt;h2 id=&#34;css設計方針:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;CSS設計方針&lt;/h2&gt;

&lt;p&gt;CSS全体に関しては、以下の様な感じで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;絶対にCSSを増やしたくない&lt;/li&gt;
&lt;li&gt;class名で悩みたくない&lt;/li&gt;
&lt;li&gt;完璧じゃなくてもいい&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;絶対にcssを増やしたくない:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;絶対にCSSを増やしたくない&lt;/h3&gt;

&lt;p&gt;CSSとは時とともに増えるものだ。新しいページが増えるイコール、CSSを新規に追加しなければならない。そこでモジュールとして設計しておけば、新しいページができたとしても再利用ができ、新規に作らなければならないスタイルを最小限に抑えることが出来る。しかし、必ずしもモジュールの再利用ができるのかといったら、それは難しい問題だ。モジュールAとは微妙にちがうモジュールA’などが当然のごとく登場してくる。&lt;/p&gt;

&lt;p&gt;これはデザイナーの責任とは100％言い切れない、クライアントの要望であったり、力のあるステークホルダーからの意見であったりと、UIとは最初に設計したものから変幻自在にその姿を変える。未来は誰にもわからないのである。&lt;/p&gt;

&lt;p&gt;このため、私はモジュール単位で設計すると同時に、&lt;a href=&#34;https://github.com/t32k/maple/blob/master/src/files/css/sass/core/_helper.scss&#34;&gt;helper.sccs&lt;/a&gt;を充実させた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Directory structure
├── maple.css
└── sass
    ├── maple.scss
    ├── _core.scss
    ├── core
    │   ├── _base.scss
    │   ├── _helper.scss
    │   ├── _date.scss
    │   ├── _reset.scss
    │   └── _settings.scss
    ├── _modules.scss
    ├── modules
    │   ├── _bars.scss
    │   ├── _boxes.scss
    │   ├── _buttons.scss
    │   ├── _forms.scss
    │   ├── _headlines.scss
    │   ├── _listviews.scss
    │   └── _misc.scss
    └── vendors
        └── _myfont.scss

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;helper.scssはユーティリティ的に使える便利classをまとめたものだ。&lt;code&gt;.c{ text-align:center !imporatnt}&lt;/code&gt; などのように単一のCSSプロパティだけを記述した短い名前のclassだ。&lt;/p&gt;

&lt;p&gt;これらのCSSを充実させることで、パターンに外れたUIの変更、例えばこのページのこのモジュールだけ文字色はこれ！とか、このページの時は余白を大きく！などのケースは、&lt;code&gt;.module.helper&lt;/code&gt;のようにマルチクラスで、モジュールに任意のヘルパーclassを追加するだけで対応できるようになる。&lt;/p&gt;

&lt;p&gt;また、モジュールにはmarginやpositionなどの位置を指定するプロパティを記述しないほうが無難だ。モジュールとして設計している以上、それはどの場所にもおけることを前提としているので、そのようなスタイルをつけていると問題になることが多い。&lt;/p&gt;

&lt;p&gt;これらの考えを適用したHTMLは&lt;code&gt;class=&amp;quot;btn-primary mod mbx ca c&amp;quot;&lt;/code&gt;などのような属性値となるだろう、命名ルールはあとから説明するとして、このように複数のclass属性値を持つことは当然の流れなのではないかと最近痛感している。我々はWebアプリケーションを作っているのであって、Webドキュメントを作っているわけではない。しかし、CSS自体、ドキュメントをスタイル付けするために生まれたようなものである。CSS3になって表現的にはリッチになったものの、構文的には何も進化していない（だからCSSプリプロセッサがあるのだけど）、プロパティが増えただけだ。このような現状でやれば多少のほころびというか気になる点もでてくるのは仕方のないことだと思う。&lt;/p&gt;

&lt;p&gt;モバイルアプリケーションフレームワークで有名なjQuery MobileやSencha Touchのclassの当て方を見てみれば分かるように、要素に対して3,4つのclass属性がついているのがざらだ。汎用性を持たせるにはこの方法が現実解なのだろう。&lt;/p&gt;

&lt;h3 id=&#34;class名で悩みたくない:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;class名で悩みたくない&lt;/h3&gt;

&lt;p&gt;よく、class名とは『抽象的スギズ 具体的スギズ』なものが良いと言われているが、これを考えることはすごく難しい。ひどいときは2,3時間class名を考えているときがある。パッと思いつくこともあるが、先ほど述べたように、未来は誰にもわからない。もしこのモジュールが予定していたものと違った用途でも使われたら？などと考えはじめると、これでは具体的すぎるので、もうちょっと抽象的な名前にするか、いやこれでは抽象的すぎるといった具合に、英語辞書サイトをグルグル回ったりすることが日常である。&lt;/p&gt;

&lt;p&gt;我々の仕事はclass名を考えることではない。確かに良い名前をつけることは良いことだが、頻繁なUI変更を繰り返せば、当初予定していた意味とは違った用途で使われることは予想できる。そこで私は、アルファベットの連番を採用した。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.{moduleName}-{alphabet}&lt;/strong&gt;のように、btn-a, btn-b, btn-cといった具合だ。このような命名パターンで有名なのはbtn-primary, btn-secondaryといったものだろう。しかし、３つめのパターンのボタンが出てきた場合、なんてclass名になるのだろうか？btn-thirdlyだろうか？正解はbtn-tertiaryだそうだ。ちなみに、 quaternary, quinary, senary と続くそうだ。そもそも１つのサイトで何種類ものボタンが出てくること自体おかしいのだと言えばそうかもしれない。&lt;/p&gt;

&lt;p&gt;が、現実問題、サイトにおいてボタンは何種類も出てくる。そこで、btn-tertiaryといった正しい名前をつけても我々はネイティブではないし、大抵の人が意味が分からないだろう。またbtn-primaryといった名前のつけたボタンも時がたてば&amp;rsquo;主要的な&amp;rsquo;使われ方もしなくなってくるのが現実世界だ。&lt;/p&gt;

&lt;p&gt;そこで、できるかぎり意味性を排除したa,b,cであれば、破綻しない。なぜならもともと意味が無い、ニュートラルなものであるから。いかようにもパターンを増やしていける（増やさないほうがいいんだけど）。&lt;/p&gt;

&lt;p&gt;よく、class名はセマンティックでなければならないとかほざいてる人がいるんだけど、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are no additional restrictions on the tokens authors can use in the class attribute, but authors are encouraged to use values that describe the nature of the content, rather than values that describe the desired presentation of the content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#classes&#34;&gt;3.2 Elements — HTML Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そんなこと仕様書に書いていない。Webにおいてセマンティックと言えば、&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A6%E3%82%A7%E3%83%96&#34;&gt;セマンティック・ウェブ&lt;/a&gt;を指していると思われ、機械的にデータを再利用できるような仕組みのことを言っている。つまりあなたがセマンティックだと思ってつけたclass=&amp;ldquo;primaryButton&amp;rdquo;はclass属性値がprimaryButtonということでしかなく、ブラウザがそれを読み取って主要なボタンを抽出するといった芸当なんてことはしてくれない。&lt;/p&gt;

&lt;p&gt;セマンティックなマークアップをしたければ、&lt;a href=&#34;https://support.google.com/webmasters/answer/176035?hl=ja&#34;&gt;microdata&lt;/a&gt;を利用するのが妥当だろう。（&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88&#34;&gt;microformats&lt;/a&gt;と混同してはいけない）&lt;/p&gt;

&lt;h3 id=&#34;完璧じゃなくてもいい:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;完璧じゃなくてもいい&lt;/h3&gt;

&lt;p&gt;最近読んだ記事に、『&lt;a href=&#34;http://www.infoq.com/jp/articles/managing-technical-debt&#34;&gt;技術的負債を管理する&lt;/a&gt;』というものがある。技術的負債というのは素早くいい加減に実装したコードのことを言っている。この記事では技術的負債を受け入れるということが述べられている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;技術的負債が常にあること&lt;/li&gt;
&lt;li&gt;技術的負債が常に悪い訳ではないこと&lt;/li&gt;
&lt;li&gt;技術的負債は完全に支払わなければならないものではないこと&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSSにおいて、技術的負債と言えば、&lt;code&gt;style=&amp;quot;margin-right:54px&amp;quot;&lt;/code&gt;などのようにstyle属性で書かれたものや、style要素など書かれたものを言うだろうか。CSS（じゃなくてもいいが）を管理する上において外部ファイルにまとめるのは当然だが、それではCSSファイルが肥大化する。&lt;/p&gt;

&lt;p&gt;例えば、キャンペーンページなどそのページでしか存在しないスタイルを全ページで読み込む１つの外部CSSファイルに記述してしまうことは本当によいことだろうか？そのページを見ない人もそのスタイルの記述分のコストを負担させることになる。&lt;/p&gt;

&lt;p&gt;私はそのような場合はキャンペーンページのビューにstyle要素として埋め込めば良いと思う。キャンペーンページなどは一度作ってしまえば、またキャンペーンが終わったりすればあまりコードを弄ることはない。この場合、このstyle要素で書かれたコードは技術的負債といえるのか？ということだが、負債として我々にのしかかって来るのかといえばそうでもない。&lt;/p&gt;

&lt;p&gt;このキャンペーンが頻繁に更新する要な場合であればまた別途違った方法を考えるべきだが、そうなっていない以上はこのようなコードを受け入れる必要があると思う。同じようにヘルパーにないパターンのmarginが出てきた時も新しいヘルパーとしてhelper.scssに登録するのではなく、まずはstyle属性に書いて様子を見るのも１つの手段だと思う。&lt;/p&gt;

&lt;p&gt;だって人間だもの、完璧じゃなくてもいいと思う。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;まぁそうゆう方針で作っています。前提として、CSSは１つの外部ファイルとしてまとめているもので、UIの変更が頻繁にあるケースを想定しています。なので、一回作って終わり！と言ったケースであれば、別にクラス名はシングルでもいいし、ロケーションに基づいたスタイル付けでもなんでも良いと思う。&lt;/p&gt;

&lt;p&gt;世の中ベストなCSSといったものがあるかどうかわからないけど、あったとしてもそのプロジェクト（運用）で、ベストなわけであって、自分のプロジェクトでもベストなことはないと思う。ただ、『これどこからいじったらいいんじゃい！』ってな最悪な状況にならないためにも最低限なルールなり決まりをつくったほうがいいかなと思っている。&lt;/p&gt;

&lt;h3 id=&#34;ロードマップ:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;ロードマップ&lt;/h3&gt;

&lt;p&gt;v1.0の正式リリースに向けて、UIスタイルを設けるつもりだけど、そんな格好いいものは用意できないので期待しないでほしい。むしろ、コーディングスタイルの例として設けるのが狙いです。&lt;/p&gt;

&lt;p&gt;あと、この命名規則の弱点としてclass名からスタイルを類推しづらいというのが弱点なので、そこをカバーする上でスタイルガイドの作成というのは必須だろうと思っている。前にstyledoccoを使ったことがあるが自分的にしっくりきてないので、いいのを見つける必要性があるなーと。&lt;/p&gt;

&lt;h2 id=&#34;cssのためのgrunt-task:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;CSSのためのGrunt Task&lt;/h2&gt;

&lt;p&gt;現時点でCSSは全然書いてないのはずーっとGrunt Taskの設定をしていたり、プラグイン作ってたりしてたという理由があります。マシなCSSを書くために必要なGrunt用意しましたー。&lt;/p&gt;

&lt;p&gt;Mapleプロジェクトは&lt;a href=&#34;https://github.com/t32k/grunt-init-maple&#34;&gt;grunt-init-maple&lt;/a&gt;を使えば、gurnt-init mapleでプロジェクトをスキャフォルドできます。あとはプロジェクトに必要なnode_moduleを落としてくれば、すぐに使えます！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/t32k/grunt-init-maple.git ~/.grunt-init/maple --recursive
$ git-init maple
$ cd /path/to/maple_project/src/tools 
$ npm install
# ローカルサーバが立ち上がってSassがwatchの状態になる。
$ grunt develop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;grunt-contrib-connect-grunt-contrib-watch:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;grunt-contrib-connect / grunt-contrib-watch&lt;/h3&gt;

&lt;p&gt;ローカルサーバーとウォッチ、ライブリロード機能を有効にしています。コンポーネントページでモジュールを開発したりするとき便利です。&lt;/p&gt;

&lt;h3 id=&#34;grunt-contrib-compass:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;grunt-contrib-compass&lt;/h3&gt;

&lt;p&gt;Sass/Compassのコンパイルのために入れてます。Compassだけど、Retina用のCSSスプライト、&lt;a href=&#34;https://github.com/t32k/maple#mixins&#34;&gt;新たにリライト&lt;/a&gt;してみました。良かったら使ってね。&lt;/p&gt;

&lt;h3 id=&#34;grunt-contrib-csslint:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;grunt-contrib-csslint&lt;/h3&gt;

&lt;p&gt;CSSのLintです。IDとか使ってたら怒られます。IEとか古いブラウザ対応のためのlintはオフにしてあります。どうゆう理由で&lt;a href=&#34;https://github.com/stubbornella/csslint/wiki/Rules&#34;&gt;そういったルール&lt;/a&gt;が設けてあるのか一度読んでおいたらタメになります。&lt;/p&gt;

&lt;h3 id=&#34;grunt-csso:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;grunt-csso&lt;/h3&gt;

&lt;p&gt;より高い率でミニファイしてくれるCSSOのgrunt pluginです。&lt;a href=&#34;http://t32k.me/mol/log/csso-and-grunt-csso/&#34;&gt;過去に記事かいたのでそこ参照。&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;grunt-csscomb:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;grunt-csscomb&lt;/h3&gt;

&lt;p&gt;CSSプロパティをソートしてくれるgrunt pluginです。&lt;a href=&#34;http://t32k.me/mol/log/csscomb/&#34;&gt;過去に記事かいたのでそこ参照。&lt;/a&gt;最初からMapleのルールでCSSでかけばそこまであれだけど、１つのセレクタに何十ものプロパティを書いてる時などは、これでプロパティ順を揃えればgzipの圧縮率を高めてくれます。&lt;/p&gt;

&lt;h3 id=&#34;grunt-webfont:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;grunt-webfont&lt;/h3&gt;

&lt;p&gt;あと、最近webフォントを使ったのだけど、これを使う前はオンラインのwebフォント管理ツールとか使っていてすごく面倒くさいなと思っていた。けどこれ使えば、webフォントしたいSVGを任意のディレクトリにいれてgrunt webfontカマスだけさ！&lt;/p&gt;

&lt;h3 id=&#34;grunt-imageoptim:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;grunt-imageoptim&lt;/h3&gt;

&lt;p&gt;Compassで生成されたスプライト画像（PNG）とかはPNG-24なので重いです。それをアルファ透過つきPNG-8にダウンコンバートしてサイズ量を減らしてくれます。要&lt;a href=&#34;http://imageoptim.com/&#34;&gt;ImageOptim (Mac app)&lt;/a&gt; です。忘れがちなので、buildタスクに入れておきましょう。&lt;/p&gt;

&lt;h3 id=&#34;grunt-kss:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;grunt-kss&lt;/h3&gt;

&lt;p&gt;kss-nodeでスタイルガイドを生成してくれます。&lt;code&gt;.btn-a&lt;/code&gt;とかクラス名からスタイルが類推しづらいのでスタイルガイドの作成は必須になってきます。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:1c7d569cc15531a2b6eee3b94c991b32&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;別にCSS使わなくても単純にGruntfileだけ拝借して使ってもらっても構わない、何かの役に立てて貰えればさいわいです。&lt;/p&gt;

&lt;p&gt;フレームワークは所詮ツールでしかありません。これ使えばすべてがOKということは、もちろんなく。CSSだけでどんだけがんばってもデザインがくそだったらCSSもくそになります。逆を言えば、デザイナーさんとうまくルール（パターン）を予め決めて開発をすれば驚くほどCSSは軽くなります。その辺はデザイナーさんと協力・コミュニケーションしながら共通認識（ゴール）を持つことが一番重要です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OOCSSをbuildする</title>
      <link>http://localhost:1313/mol/log/make-oocss-styleguide/</link>
      <pubDate>Sat, 29 Jun 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/make-oocss-styleguide/</guid>
      <description>&lt;p&gt;ちょいーんっす！あたーんっす！&lt;/p&gt;

&lt;p&gt;みなさん、&lt;a href=&#34;http://oocss.org/&#34;&gt;OOCSS&lt;/a&gt;って知ってますか？僕は知らないです。嘘です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/stubbornella&#34;&gt;@stubbornella&lt;/a&gt;が、4,5年前に言い出したオブジェクト指向なCSSの考え方みたいなもんです。CSSでこんなもの表現できた！とかそうゆうTips系の話題は事欠かないのですが、CSSの設計についての話はそれ以前には（今もそうですが）あまりなかったので、個人的にはとても衝撃的でした。
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/hiloki/a-good-css-and-sass-architecture&#34;&gt;ちゃんとCSSを書くために - CSS/Sass設計の話&lt;/a&gt;（あ、最近イカス資料見つけたぞ！）&lt;/li&gt;
&lt;/ul&gt;
まぁそんなOOCSSですが、ここ一年は目立った更新はありませんでした。と思ってたら最近、&lt;a href=&#34;https://github.com/stubbornella/oocss&#34;&gt;GitHubのレポジトリ&lt;/a&gt;見たらなんかすごく変わってる！&lt;/p&gt;

&lt;p&gt;新しくなったドキュメントを読みたいのですが、&lt;a href=&#34;https://github.com/stubbornella/oocss/tree/master/oocss&#34;&gt;Readme&lt;/a&gt;を読むと、どうやらSassやらHandlebarsやら使っててbuildしなきゃいけないっぽいす。んで仮想環境をVagrantで提供してるとのこと。&lt;/p&gt;

&lt;p&gt;なんと！俺はただCSSのドキュメントを読みたいだけなのに、めんどくせ(๑･ิω･ิ๑)yー～&lt;/p&gt;

&lt;p&gt;と言っててもしょうがないのでがんばってみる。
&lt;h2&gt;事前インストール&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt; (多分入ってると思うけど&amp;hellip;)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;VirtualBox&lt;/a&gt; (現状、4.2.14やめて、4.2.12を選択しとく)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://downloads.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; (gemでインスコしたことある人はアンスコしとく)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OOCSSをbuild&lt;/h2&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;&lt;img class=&#34;aligncenter  wp-image-4963&#34; src=&#34;/static/blog/2013/06/4f7c94e2ab3fb1d22b3c581a01721d3b.png&#34; alt=&#34;&#34; width=&#34;900&#34; /&gt;&lt;/p&gt;
&lt;a href=&#34;https://github.com/stubbornella/oocss&#34;&gt;OOCSS&lt;/a&gt;をForkする(フォークボタン押すだけね！)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;git clone https://github.com/{user_name}/oocss.git

Cloning into &#39;oocss&#39;...
remote: Counting objects: 1800, done.
remote: Compressing objects: 100% (1261/1261), done.
remote: Total 1800 (delta 580), reused 1626 (delta 445)
Receiving objects: 100% (1800/1800), 1.53 MiB | 121.00 KiB/s, done.
Resolving deltas: 100% (580/580), done.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ForkしたのをCloneしてくる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd oocss/oocss&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vagrantfileのある場所に移動する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ vagrant up

Bringing machine &#39;default&#39; up with &#39;virtualbox&#39; provider...
[default] Box &#39;stubbornella&#39; was not found. Fetching box from specified URL for
the provider &#39;virtualbox&#39;. Note that if the URL does not have
a box for this provider, you should interrupt Vagrant now and add
the box yourself. Otherwise Vagrant will attempt to download the
full box prior to discovering this error.
Downloading or copying the box...
Extracting box...te: 206k/s, Estimated time remaining: 0:00:01))
Successfully added box &#39;stubbornella&#39; with provider &#39;virtualbox&#39;!
[default] Importing base box &#39;stubbornella&#39;...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vagrant upで起動させる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ vagrant ssh&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vagrant sshで中に入る&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;vagrant@lucid32:/vagrant$ make build

##################################################
Clean the project
##################################################
Removing the build directory
cleaning compass files...
Remove Node modules
##################################################
Clean project                               ✔ Done
##################################################

##################################################
Building OOCSS...
##################################################


##################################################
Building CSS Files with Sass...

##################################################
Building Documentation...
##################################################

Build done at : Fri Jun 28 2013 20:36:15 GMT+0200 (CEST)

##################################################
##################################################

OOCSS Build                                 ✔ Done
##################################################&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;makeする&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:8080/docs/library.html&#34;&gt;http://localhost:8080/docs/library.html&lt;/a&gt; にアクセスしてドキュメントみる。わーい見れた！
&lt;p style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;/static/blog/2013/06/b37d8e01bd98623ba758276cde9747da.png&#34;&gt;&lt;img class=&#34;aligncenter  wp-image-4964&#34; src=&#34;/static/blog/2013/06/b37d8e01bd98623ba758276cde9747da.png&#34; alt=&#34;&#34; width=&#34;900&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
ほらね、簡単でしょ？&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ vagrant halt&lt;/code&gt;&lt;/pre&gt;
ちなみにvagrant haltでVMを停止させることができます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSSプロパティの継承：inherit</title>
      <link>http://localhost:1313/mol/log/inheriting-link-colour/</link>
      <pubDate>Mon, 08 Apr 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/inheriting-link-colour/</guid>
      <description>&lt;p&gt;&lt;p style=&#34;text-align: center;&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-4776&#34; title=&#34;listviews&#34; src=&#34;/static/blog/2013/04/link.png&#34; alt=&#34;&#34; width=&#34;860&#34; height=&#34;450&#34; /&gt;&lt;/p&gt;
最近のスマホサイトとかコーディングしてるとこーゆうリストビューのコンポーネントをよくマークアップする。リストのひとつの項目全体がタップエリアで遷移したりなんかアクションしたりする。&lt;/p&gt;

&lt;p&gt;こーゆのコーディングするとなると、ul &amp;gt; li &amp;gt; aでaをblock要素にしたりする。そんとき、上記の普通のテキスト文もリンクテキストになってしまって、いわゆる青色の下線テキストリンクのようなスタイルになってしまう。
&lt;pre&gt;&lt;code&gt; body { color: black; } a { color: blue; } &lt;/code&gt;&lt;/pre&gt;
下線付きとは言わなくてもまぁたいていリセットの段階で基本的なリンク色を設定してると思う。
&lt;pre&gt;&lt;code&gt; ul li { color: gray; } &lt;/code&gt;&lt;/pre&gt;
それじゃいけないってもんだから、ul &amp;gt; liにグレーの文字色を定義したりする。『あれ？青色のままじゃん？あ、そうだaのcolorは継承しないんだったー』ってことが疲れてるとよくある。
&lt;pre&gt;&lt;code&gt; ul li, ul li a { color: gray; } &lt;/code&gt;&lt;/pre&gt;
だもんで、めんどくさいけど、こんなことしてた（aで包まない時にも文字色を維持するため）。なんかこれは単純な例だけど、もうちょっと複雑になると、詳細度の兼ね合いとかめんどくさくなってくる。しかしまぁよくよく考えたら、継承させればいいんだよねってことで、ここでinheritさんの登場だ。
&lt;pre&gt;&lt;code&gt; a { color: inherit; } ul li { color: gray; } &lt;/code&gt;&lt;/pre&gt;
こうしとけば、 ul &amp;gt; li &amp;gt; aは、グレーの文字色を継承する。inheritなんて初めて使っただよ。（&lt;a href=&#34;http://jigokuno.com/?eid=943&#34;&gt;やっべー、CSS3ばっか使ってinherit使ってこなかったわー。ほら俺ってCSS3ばっか使っちゃうからー&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;スマホサイトはタップエリアを大きくするためにblock化して、aに多くの内容物が放り込まれるきらいがある。だもんで、aも通常のspanとかdiv感覚に扱うようになってきから、継承させたほうがなにかと都合が良い気がする。そのほうが素直な気がする。&lt;/p&gt;

&lt;p&gt;とおもったの(´・ω・`)
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://snook.ca/archives/html_and_css/inheriting_link&#34;&gt;Inheriting Link Colour - Snook.ca &lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>パフォーマンスからみるSass/Compass 第2回：CompassによるCSS Sprite</title>
      <link>http://localhost:1313/mol/log/spriting-with-compass/</link>
      <pubDate>Sun, 02 Dec 2012 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/spriting-with-compass/</guid>
      <description>&lt;p&gt;&lt;blockquote&gt;Sass、Less、StylusなどCSS Preprocessorに関するAdvent Calendarです。
&lt;a href=&#34;http://www.adventar.org/calendars/1&#34;&gt;CSS Preprocessor Advent Calendar 2012 &lt;/a&gt;&lt;/blockquote&gt;
&lt;ul&gt;
    &lt;li&gt;【1日目】&lt;a href=&#34;http://webtech-walker.com/archive/2012/12/less_extend.html&#34;&gt;最近のLessのextendの進捗 - Webtech Walker &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;【3日目】&lt;a href=&#34;http://tech.naver.jp/blog/?p=2268&#34;&gt;compassのベンダープリフィックス制御 « NAVER Engineers&amp;rsquo; Blog &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
パフォーマンスの勉強ができてなおかつSass/Compassのお勉強にもなるお得なシリーズまさかの2回目。Adventにぶつけてきた！ややもするとシリーズものの2作目というのは駄作になりがちだが、そんなプレッシャーはねのけて乱反射！やっていくYO! これまでの。
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34; http://t32k.me/mol/log/sass-nesting-and-import/&#34;&gt;パフォーマンスからみるSass/Compass 第1回：Nestingと@import&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://t32k.me/mol/log/compass-ie-hex-str-function/&#34;&gt;パフォーマンスからみるSass/Compass 番外編：MSは青かった&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
&lt;h2&gt;CSS Spriteの利点・欠点&lt;/h2&gt;
「&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487311361X/warikiru-22/&#34;&gt;ハイパフォーマンスWebサイト&lt;/a&gt;」（オライリー・ジャパン）の書籍には「高速サイトを実現する14のルール」というものがある。その中でも最も効果のある対策として「HTTPリクエストを減らす」ことを挙げている。HTTPリクエストというのは画像やJavaScriptファイル、CSSファイル等をWebページで読み込む（サーバーにリクエストする）ことを言う。 このリクエストが多ければ多いほど、HTMLページの読み込み速度は遅くなってしまう。フロント（マークアップ）側でできる対策としてはポピュラーなものとしてCSSスプライトという手法があり、これは複数の画像をひとつにまとめ、背景画像としてbackground-positionを調整することで一つ一つの画像として表示する方法だ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=s__XwfwxMW8&#34;&gt;http://www.youtube.com/watch?v=s__XwfwxMW8&lt;/a&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=s__XwfwxMW8&#34;&gt;Minimize HTTP Requests! Requests 30 vs 1 (CSS Sprite) - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
いかに、CSSスプライトが有用かは上記の動画を見てもらえれば分かるだろう。アイコン画像を30個をimg src=&amp;ldquo;&amp;ldquo;で読み込む場合と、30個のアイコンを全てひとつの画像にまとめたCSSスプライトで読み込む場合では（環境によっても変化はあるが）3倍の差が出た。&lt;span style=&#34;color: #888888;&#34;&gt;（3倍だと！？そいつはシャアだ。赤い彗星だ！）&lt;/span&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://t32k.github.com/speed/rtt/SpriteImages.html&#34;&gt;&lt;strong&gt;CSSスプライトに画像をまとめる | LPWS&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
どのような画像をまとめたらよいのかは上記のリソースを参考にすればよい。 ただ、CSSスプライトにも問題がある。それは管理が非常に面倒な点だ。まずひとつひとつの画像をPhotoshopなどの画像編集ツールでまとめる必要あり、またその配置した画像の座標をbackground-positionに反映させる必要がある。
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://ja.spritegen.website-performance.org/&#34;&gt;&lt;strong&gt;CSS Sprite Generator | Project Fondue&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
CSS Sprite Generator のような便利なオンラインツールが存在するが、画像の変更があった場合、再度オンラインにアップロードしてコードをジェネレートする必要があったり、Retina対応を考えると自分で画像のサイズを半分にして計算しないといけない。 これでは、サービスリリース後などの度重なる改善・修正にマークアップが追いつかず不必要な画像までもそのままスプライト画像に残してしまっ た状態で無駄な転送量が発生してしまう。 実際に私がやっている案件でもグローバルナビゲーションや、カテゴリナビゲーションなどにスプライト画像を使用しHTTPリクエストを最小限に抑えている。リリース当時はきれいにまとまったスプライト画像も度重なるサービス改善で、スプライト画像のカテゴリアイコンがなくなったり、追加したりと何度も手入れをしなければならないことが発生し、その度に画像の作成・位置の再計算など非常に面倒な作業だった。&lt;span style=&#34;color: #888888;&#34;&gt;（李徴はとうとう発狂した！）&lt;/span&gt;
&lt;h2&gt;Compassによる解決策&lt;/h2&gt;
そこで目につけたのが、Compassフレームワークだ。Sassは開発当初から利用していたが、Compass自体は利用していなかった。Compassにはスプライトを簡単に利用できるAPIが備わっており、画像編集ソフトなど使わなくても画像を一つにまとめたり、それぞれのbackground-positionを算出してくれる。 使い方は非常にシンプルだ。スプライト画像にまとめたい個々の画像を任意のディレクトリに格納しておき、&lt;em&gt;@import&lt;/em&gt;でそのディレクトリを指定し、&lt;em&gt;@include all-ディレクトリ名-sprites&lt;/em&gt;で展開するだけだ。
&lt;pre&gt;&lt;code class=&#34;css&#34;&gt;//　基本的なCompassスプライトの利用方法
@import &amp;ldquo;my-icons/&lt;em&gt;.png&amp;rdquo;;
@include all-my-icons-sprites;&lt;/code&gt;&lt;/pre&gt;
上記のSCSSコードは下記のようにコンパイルされる。
&lt;pre&gt;&lt;code class=&#34;css&#34;&gt;/&lt;/em&gt; コンパイルされたCSS &lt;em&gt;/
.my-icons-sprite, .my-icons-fav, .my-icons-hist, .my-icons-my, .my-icons-new {
    background: url(&amp;lsquo;/images/my-icons-sab4abd7554.png&amp;rsquo;) no-repeat;
}
.my-icons-fav { background-position: 0 -68px; }
.my-icons-hist { background-position: 0 -136px; }
.my-icons-my { background-position: 0 -204px; }
.my-icons-new { background-position: 0 0; }&lt;/code&gt;&lt;/pre&gt;
また上記のコードではmy-iconsディレクトリ以下にある個々の画像をひとつのスプライト画像にまとめてくれる。 &lt;img class=&#34;aligncenter size-full wp-image-4465&#34; title=&#34;compile&#34; alt=&#34;&#34; src=&#34;/static/blog/2012/12/compile.png&#34; width=&#34;900&#34; height=&#34;300&#34; /&gt;ただ、基本的な利用方法ではRetina対応や、自分のコードスタイルに合わず、独自でmixinを作成する必要があった。
&lt;pre&gt;&lt;code class=&#34;css&#34;&gt;//　自分で定義したmixin
@mixin sprites($map, $map-item, $isCommon:false) {
     @if $isCommon {
          background-image: sprite-url($map);
          background-repeat: no-repeat;
          background-size: round(image-width(sprite-path($map)) / 2) round(image-height(sprite-path($map)) / 2);
     } @else {
          $pos-y: round(nth(sprite-position($map, $map-item), 2) / 2);
          width: round(image-width(sprite-file($map, $map-item)) / 2);
          height: round(image-height(sprite-file($map, $map-item)) / 2);
          background-position: 0 $pos-y;
     }
}&lt;/code&gt;&lt;/pre&gt;
実際の使い方
&lt;pre&gt;&lt;code class=&#34;css&#34;&gt;// mapを指定する
// $spacingの引数で個々の画像のマージンを指定できる
// この値がなければぴっちり縦に並ぶことになる
$map-tabs: sprite-map(&amp;ldquo;/files/img/sprites/tabs/&lt;/em&gt;.png&amp;rdquo;,$spacing: 4px);&lt;/p&gt;

&lt;p&gt;// 共通プロパティのextend
%tabs { @include sprites($map-tabs, common, true); }&lt;/p&gt;

&lt;p&gt;// 共通プロパティ指定
i {
    @extend %tabs;
    position: relative;
    display: block;
    margin: 0 auto;
}&lt;/p&gt;

&lt;p&gt;// 個別プロパティ指定
.tab-new i { @include sprites($map-tabs, new, false); }
.tab-fav i { @include sprites($map-tabs, fav, false); }
.tab-hist i { @include sprites($map-tabs, hist, false); }
.tab-mypage i { @include sprites($map-tabs, my, false); }
.tab-new.active i { @include sprites($map-tabs, new-on, false);}
.tab-fav.active i { @include sprites($map-tabs, fav-on, false); }
.tab-hist.active i { @include sprites($map-tabs, hist-on, false); }
.tab-mypage.active i {@include sprites($map-tabs, my-on, false); }&lt;/code&gt;&lt;/pre&gt;
上記のコードでは、実際の画像ファイルの縦・横サイズを半分にして計算し、Retina対応をしている。等倍の画像ファイルも用意するのであればメディアクエリーを利用し分岐処理のコードを追加すれば良い。&lt;/p&gt;

&lt;p&gt;このコードの肝というか、個人的に重要だと思っているのはこの&lt;em&gt;image-width(sprite-path($map)&lt;/em&gt;部分である。これはスプライトした画像のパスを取り、そのwidthを返すものだ。通常のCSSやSassではこのようにファイルアクセスしそのファイルの情報を得るということはできなかった。故に、人力でbackground-positionを割り出すという面倒なことをやっていたのだ。&lt;/p&gt;

&lt;p&gt;これより、非常に簡単にCSSスプライトの画像を管理できるようになった。なぜならスプライトしたい画像をまとめたディレクトリに画像を追加・削除・修正することで、Compassがそれを検知し自動的にスプライト画像を再生成し、background-positionの値をコードに反映してくれる。 これにより度重なるトライ・アンド・エラーに対して、時間的・モチベーション的にも余裕をもって改善のイテレーションを回せるようになった。
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://compass-style.org/reference/compass/helpers/sprites/&#34;&gt;CSS Sprite Helpers for Compass | Compass Documentation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://compass-style.org/help/tutorials/spriting/&#34;&gt;Spriting with Compass | Compass Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a href=&#34;/static/blog/2012/12/sprites.png&#34;&gt;&lt;img class=&#34;alignleft size-thumbnail wp-image-4464 fig&#34; title=&#34;sprites&#34; alt=&#34;&#34; src=&#34;/static/blog/2012/12/sprites-150x150.png&#34; width=&#34;150&#34; height=&#34;150&#34; /&gt;&lt;/a&gt;また気をつけなければならないことに、簡単にCSS Spriteできるようになったからといってすべての画像をスプライト画像にまとめることがないようにしたい。可能な限り、HTTPリクエストを減らすことは良いことだが、何事も限度がある。たとえばサイトで使うすべての画像をまとめてしまえば、そのどれか一つでも更新があれば再度リクエストしなければならない。これはキャッシュ保持できる期間が短くなってしまうことを意味し、結果的に応答性の悪いサイトになってしまう。ヘッダー画像のような大きな画像も含めば、初期ロード時にかなり待たなければならず体感速度的にも大きな影響がある。またそのような大きな画像と上記のような小さなアイコンが縦に並べば、空白の部分が多く生じる。ホワイトスペース部分はファイルサイズに影響しないが画像を表示するのにメモリを多く必要としてしまうため、これは非力なモバイルデバイス端末では無視できない事象である。&lt;/p&gt;

&lt;p&gt;そのため、私は種類ごと、どのページでその画像が呼び出されるのかといった基準でスプライト画像を分けて管理している。タブバーで使われるものはtabsディレクトリ、矢印系のものはarrowsディレクトリに分けてなど、スプライト画像を作成している。
&lt;h2&gt;さらなる最適化のために&lt;span style=&#34;color: #888888;&#34;&gt;（ピリオドの向こうへ）&lt;/span&gt;&lt;/h2&gt;
スプライト画像のPNGはCompassによって生成されるわけだが、これはRubyライブラリのchunky_pngを使用している。何ぶん画像を生成するので重たい処理だ。Cで書かれた拡張機能のoily_pngをインストールすると生成を早くすることができる。インストールは簡単だ。 &lt;code&gt;gem install oily_png&lt;/code&gt; を打つだけで、あとはCompassが自動で認識してくれる。&lt;/p&gt;

&lt;p&gt;またまた、Compassで生成された画像はもちろん最適化されていないので&lt;a href=&#34;http://imageoptim.com/&#34;&gt;imageOptim.app&lt;/a&gt;などで最適化する必要がある。imageOptimをかけると、中には半分くらいファイルサイズを減量させることも可能で、この手間をかけるのとかけないのでは大きな違いだ。ただ、スプライトの画像を何度も追加・削除・修正するたびにimageOptim.appを起動し、ドラッグ・アンド・ドロップなんて真似事はめんどくさいの極みである。&lt;span style=&#34;color: #888888;&#34;&gt;（二重の極み！あっーーー！） &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;そこでGruntである。&lt;a href=&#34;http://havelog.ayumusato.com/develop/javascript/e514-grunt_arrange_task.html&#34;&gt;&lt;strong&gt;Gruntについては@ahomuブログを参照してもらえると良いだろう&lt;/strong&gt;&lt;/a&gt;。gurnt deployといった具合にリリースする前にかますオリジナルタスク、またはwatchタスクに下記のような画像最適化タスクを入れておけば自動的に最適化してくれる。
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/heldr/grunt-img&#34;&gt;grunt-img&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/sapegin/grunt-imgo&#34;&gt;grunt-imgo&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-imagemin&#34;&gt;grunt-contrib-imagemin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
いかがだっただろうか。CSS Spriteという一見複雑な作業も1つ1つのタスクに分けて考えれば機械にできることなので、そういったものはすべて機械に任せるようにし人間はもっとクリエイティブなことに集中したほうが良い。幸いなことに、Sass/CompassやGruntのように機械と対話する環境は以前よりもずっと整備されてきているので利用しない手はない。そう、この波に乗るっきゃない(・ω&amp;lt;)&lt;/p&gt;

&lt;p&gt;この続きは・・・
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://lp26.cssnite.jp/ &#34;&gt;CSS Nite LP, Disk 26「CSS Preprocessor Shootout」 &lt;/a&gt;で！！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSSOとgrunt-csso</title>
      <link>http://localhost:1313/mol/log/csso-and-grunt-csso/</link>
      <pubDate>Thu, 18 Oct 2012 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/csso-and-grunt-csso/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://css.github.com/csso/&#34;&gt;&lt;img class=&#34;aligncenter size-full fig&#34; title=&#34;CSSO&#34; src=&#34;/static/blog/2012/10/csso.png&#34; alt=&#34;&#34; width=&#34;520&#34; height=&#34;260&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;読書の秋、ご勉学の方はいかがでしょうか。 I&amp;rsquo;m your &lt;a href=&#34;https://twitter.com/t32k&#34;&gt;@t32k.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今日は&lt;strong&gt;&lt;a href=&#34;http://css.github.com/csso/&#34;&gt;CSSO (CSS Optimizer) – A CSS minimizer unlike others&lt;/a&gt;&lt;/strong&gt;の紹介だ。&lt;a href=&#34;http://t32k.me/mol/log/csscomb/&#34;&gt;前回のCSSComb&lt;/a&gt;は単純にプロパティのソートをしてくれるものだったが、今回のはminimizerだ。&lt;/p&gt;

&lt;p&gt;普段はSassの:compressed出力で最後デプロイしてるんだけど、もっとマシなものはないかなーと特には探してはないけど、&lt;a href=&#34;https://twitter.com/cssradar&#34;&gt;@cssradar&lt;/a&gt;パイセンがCSSOがいいって言ったとか言わないとかあったので調べてみた。&lt;/p&gt;

&lt;p&gt;ちなみにSassの:compressedはこんな感じで出力しているらしい。
&lt;blockquote&gt;Compressed style takes up the minimum amount of space possible, having no whitespace except that necessary to separate selectors and a newline at the end of the file. It also includes some other minor compressions, such as choosing the smallest representation for colors. It’s not meant to be human-readable.
&lt;p style=&#34;text-align: right;&#34;&gt;&lt;a href=&#34;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#id17 &#34;&gt;&lt;a href=&#34;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#id17 &#34;&gt;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#id17 &lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
改行とか空白とか色の値変換ですかね。まぁ特にそんな凝ったことはしてない模様。&lt;/p&gt;

&lt;h2 id=&#34;cssoとyui-compressor:bc8dfae980abc9145fbd46b74b3269bb&#34;&gt;CSSOとYUI Compressor&lt;/h2&gt;

&lt;p&gt;CSSのminimizerとして有名というか古くからあるのは&lt;a href=&#34;https://github.com/yui/yuicompressor&#34;&gt;YUI Compressor&lt;/a&gt;ですね。JavaScriptのminimizerとして有名ですがCSSも縮小化できます。んで、それよりもCSSOは良いってゆうもんだから、どのへんがいいのよ？と思って、CSSOの縮小化ルールを試してみた。&lt;/p&gt;

&lt;p&gt;ちなみに、YUI Compressor&amp;rsquo;s CSS minifierのルールに関しては&lt;a href=&#34;http://developer.yahoo.com/yui/compressor/css.html&#34;&gt;ここに書いてあった&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;どちらもオンラインで試せるデモツールがあったので、 &lt;a href=&#34;https://github.com/css/csso/blob/master/MANUAL.en.md&#34;&gt;CSSOのマニュアル&lt;/a&gt;に書いてあるサンプルを両方のツール試してみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;YUI Compressor DEMO: &lt;a href=&#34;http://tools.w3clubs.com/cssmin/&#34;&gt;http://tools.w3clubs.com/cssmin/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSSO DEMO: &lt;a href=&#34;http://css.github.com/csso/csso.html&#34;&gt;http://css.github.com/csso/csso.html&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみに訳してみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/css/csso/blob/master/docs/description/description.ja.md&#34;&gt;csso/docs/description/description.ja.md at master · css/csso · GitHub &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;基本的な変換:bc8dfae980abc9145fbd46b74b3269bb&#34;&gt;基本的な変換&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ホワイトスペースの削除&lt;/li&gt;
&lt;li&gt;最後尾の &amp;lsquo;;&amp;rsquo; の削除&lt;/li&gt;
&lt;li&gt;コメントの削除&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不正な @charset と @import 宣言の削除&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;color プロパティの縮小化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ゼロの縮小化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;複数行文字列の縮小化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;font-weight プロパティの縮小化&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;構造的な最適化:bc8dfae980abc9145fbd46b74b3269bb&#34;&gt;構造的な最適化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同一セレクタブロックのマージ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ブロック内の同一プロパティのマージ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上書きされたプロパティの削除&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上書きされたショートハンドプロパティの削除&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;繰り返されているプロパティの削除&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ブロックの部分的なマージ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ブロックの部分的な分割&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空のルールセット、ルールの削除&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;margin と padding プロパティの縮小化&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;太字になっているのがCSSOでできて、YUI Comoressorでは縮小化できなかったもの。colorプロパティの縮小化はYUIも一部できるとこはあったのですが、CSSOのほうが優秀でした。&lt;/p&gt;

&lt;p&gt;CSSOが他のminimizerとどのへんがunlikeなのかというと、上の対応表を見てもらうと分かるように&lt;strong&gt;構造的な最適化（Structural optimization）&lt;/strong&gt;が出来るということですね。他のminimizerは基本的にホワイトスペースの削除といったものがベースですが、CSSOはそれだけでなくスタイルブロックのマージや分割といったアグレッシブなこともしてくれます。&lt;/p&gt;

&lt;p&gt;さて、ほんとにこのCSSOはイケてるのか試してみましょう。&lt;/p&gt;

&lt;p&gt;このブログのCSSをminifyしてみた結果が以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://t32k.me/mol/wp-content/themes/quickchic/style.css&#34;&gt;http://t32k.me/mol/wp-content/themes/quickchic/style.css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;p style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;/static/blog/2012/10/filesize.png&#34;&gt;&lt;img class=&#34;aligncenter  fig&#34; title=&#34;Size&#34; src=&#34;/static/blog/2012/10/filesize.png&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;225&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
元が14Kあるのに対して、CSSOでmiifyしたほうが8,979 byteで、YUIの9,342 byteよりも400byteほど軽くなっています。うん、素敵！&lt;/p&gt;

&lt;h2 id=&#34;grunt-csso:bc8dfae980abc9145fbd46b74b3269bb&#34;&gt;grunt-csso&lt;/h2&gt;

&lt;p&gt;んで、CSSOはCSSCombみたいにテキストエディタでのプラグインが配布されていない、くまったです(･ω･)。毎回コマンドライン打つのもめんぞい。そんなところに最近、&lt;a href=&#34;http://havelog.ayumusato.com/develop/others/e495-grunt_initialize.html&#34;&gt;同僚さんがgruntエバンジェリスト&lt;/a&gt;なので、ついついそそのかされて&lt;a href=&#34;https://npmjs.org/package/grunt-csso&#34;&gt;grunt-csso&lt;/a&gt;なるものを作ってみました。これで、Gruntfile(grunt.js)に設定しておけば、簡単にminifyできますね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSScomb</title>
      <link>http://localhost:1313/mol/log/csscomb/</link>
      <pubDate>Wed, 17 Oct 2012 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/csscomb/</guid>
      <description>&lt;p&gt;&lt;p style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://csscomb.com/&#34;&gt;&lt;img class=&#34;aligncenter size-full fig&#34; title=&#34;csscomb&#34; src=&#34;/static/blog/2012/10/csscomb.jpg&#34; alt=&#34;&#34; width=&#34;520&#34; height=&#34;260&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
うららかに晴れた秋の日、みなさんいかがお過ごしか？こんちわ @t32k だ。&lt;/p&gt;

&lt;p&gt;今日は&lt;strong&gt;&lt;a href=&#34;http://csscomb.com/&#34;&gt;CSScomb&lt;/a&gt;&lt;/strong&gt;ってツールの紹介だよ。タネマキであった&lt;a href=&#34;https://twitter.com/cipher&#34;&gt;こもりさん&lt;/a&gt;のSublime Text2勉強会のときに知ったんだけど、 まぁ、CSSプロパティを綺麗にソートしてくれるって代物だ。大まかな機能はこんな感じ。
&lt;ul&gt;
    &lt;li&gt;CSSプロパティのソート&lt;/li&gt;
    &lt;li&gt;ソート順は設定可能&lt;/li&gt;
    &lt;li&gt;&amp;lt;style&amp;gt;タグ、style属性もパースできる&lt;/li&gt;
    &lt;li&gt;スタイルシートのフォーマットは変更しない(ホワイトスペースの除去とかしない)&lt;/li&gt;
    &lt;li&gt;CSS2,3,4も完全にサポートしてる&lt;/li&gt;
&lt;/ul&gt;
&lt;a href=&#34;http://csscomb.com/online/&#34;&gt;オンライン&lt;/a&gt;でも使えるし、Sublime Textだけじゃなくてメジャーなテキストエディタだったら、たいてい&lt;a href=&#34;https://github.com/miripiruni/CSScomb/downloads/&#34;&gt;プラグインが用意&lt;/a&gt;されてるんだ。&lt;/p&gt;

&lt;p&gt;へー便利なものがあるなーと思ったけども、&lt;a href=&#34;https://twitter.com/t32k/statuses/224069764396498944&#34;&gt;Sassファイルでこのツールを実行するとそんときはバグってて&lt;/a&gt;、単純にプロパティ順を綺麗にさせるためだけなのに、そんな致命的なバグの危険性（CSSが壊れる）とかマジ勘弁！などと思ったけど、あれから3ヶ月、俺もCSScombも成長したんだ。その話を聞いてくれ。
&lt;h2&gt;SassとCSScomb&lt;/h2&gt;
まずは、Sass文法をうまく理解していなかった点。&lt;a href=&#34;http://csscomb.com/tests/&#34;&gt;Tests&lt;/a&gt; を見てくれ。見てごらん綺麗な緑色してんだろ。これテストに合格してるんだぜ&amp;hellip;ってことで、Sass関連のテストも今じゃパスしてる様子。@includeが消えたりするバグも僕の方でも確認できていない。YOSHI 合格だ。&lt;/p&gt;

&lt;p&gt;ちょっとReal Filesでwarningがあるみたいだけど、Sassのパーシャルファイルとか見通しのよいファイル単位でCSScombしてあげれば問題があってもすぐ気づけるからまぁそこまでも気にしなくてもいいかなと思ってる。働いたら負けかなと思ってる。
&lt;h2&gt;gzipとCSScomb&lt;/h2&gt;
次に、CSSプロパティのソートは自己満足か？ってこと。基本コードは綺麗なほうがいいに決まってるけどそれがユーザーに対してなんかしらのメリットがないと、どーも後押しが弱いなって感じです。順番ぐらいそこまでひどくない限り、特に問題になることもないと思う（よっぽど書き散らかしたときは別だけど）。そう思ってた時代も僕にはありました。
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://t32k.github.com/speed/articles/gzip.html&#34;&gt;gzip圧縮のしくみ | LPWS &lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
まずは↑こちらをご覧いただきたい。gzipってテキストファイルとかを圧縮する技術なんですが、これサーバー側の設定をちょいちょいとするだけの割りにはなかなかナイスーな効果を発揮してくれるパフォーマンス対策のひとつでもあります。これの仕組みなんですけど、要は同じような文字列を探してひとまとめとして考えるみたいなんですね。参照リンクの例ではそれぞれ別のhnタグと全部同じのdivタグの場合だと未圧縮の状態ではhnタグのほうが少ないバイト数ですが、gzip圧縮するとdivタグのほうが少ないバイト数になるんですね。divのまとまりがひとつとしてみなされてるみたいな感じですかね。&lt;/p&gt;

&lt;p&gt;これはHTMLの例ですが、CSSの場合も同じような文字列がでてきますよね。たいていどのセレクタもmarginとかpaddingとかwidthとか含んでいます。こーいったプロパティの順番がセレクタごとにバラバラだったら同じような文字列としてカウントされないのでgzip圧縮効率も悪いんじゃねーの？って話です。&lt;/p&gt;

&lt;p&gt;試しに、Apple Storeのbase.cssで実験してみましょう。別にApple StoreのCSSが汚いって言ってるわけじゃなくてある程度分量があったから良いサンプルかなと思ったのです。
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://store.storeimages.cdn-apple.com/6487/store.apple.com/rs/rel/base.css&#34;&gt;http://store.storeimages.cdn-apple.com/6487/store.apple.com/rs/rel/base.css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;/static/blog/2012/10/b4.png&#34;&gt;&lt;img class=&#34;aligncenter  wp-image-4376&#34; title=&#34;b4&#34; src=&#34;/static/blog/2012/10/b4.png&#34; alt=&#34;&#34; width=&#34;520&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
んで、素のbase.cssとCSScombをかけた奴。もともとminifyされてるから綺麗になったかどうかわかんないけど多分ソートされたのでしょう。なぜかCombしたほうがファイルサイズが大きくなってますが、重要なのはgzipされた状態でのサイズです。
&lt;p style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;/static/blog/2012/10/a5.png&#34;&gt;&lt;img class=&#34;aligncenter  wp-image-4377&#34; title=&#34;a5&#34; src=&#34;/static/blog/2012/10/a5.png&#34; alt=&#34;&#34; width=&#34;500&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
はい、これをgzipコマンドにかけてみるとどーでしょう！わお、400バイトほど軽くなってるじゃないですか！うそーまじー！！&lt;/p&gt;

&lt;p&gt;はい。&lt;/p&gt;

&lt;p&gt;gzip圧縮を想定してない場合意味ないとか、たった400バイトとか&amp;hellip;そういった意見もあるかもしれないけど、ボタン1発でできるのならやったほうがいいよねと僕は思います。別に毎回やる必要もないし、ほんとデプロイの時に最後のひと手間かけてやるだけなんでみなさんもどーですかね。まさしくお出かけ前のCombですね！！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sassの親セレクタ参照&amp;について</title>
      <link>http://localhost:1313/mol/log/referencing-parent-selectors/</link>
      <pubDate>Thu, 06 Sep 2012 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/referencing-parent-selectors/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#referencing_parent_selectors_&#34;&gt;Sassの親セレクター参照の&lt;strong&gt;&amp;amp;&lt;/strong&gt;&lt;/a&gt;の話。&lt;/p&gt;

&lt;p&gt;Sassでどんどんネストして書いてると「親セレクタ参照してーわー、できるなら親孝行してーわー」ってたまになりますよね。僕はそんなにならないんですけど、一番わかりやすい例としてリンクの擬似クラスがあります。こんな例です。&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;// SCSS
#main {
  color: black;
  a {
    font-weight: bold;
    &amp;amp;:hover { color: red; }
    &amp;amp;:visited { color: blue; }
  }
}&lt;/code&gt;&lt;/pre&gt;
↑上がコンパイルされて↓こんな風になります。
&lt;pre&gt;&lt;code&gt;/* CSS */
#main {
  color: black;}
#main a {
  font-weight: bold;}
#main a:hover {
  color: red;}
#main a:visited {
  color: blue;}&lt;/code&gt;&lt;/pre&gt;
Sassのコードだと、aのセレクタの下層にリンクの擬似クラスのスタイルがまとまり、コードが見やすくなってますね。この例だと&lt;strong&gt;&amp;amp;&lt;/strong&gt;の部分が#main aに置き換わるわけです。はい。&lt;/p&gt;

&lt;p&gt;ほかには、モジュールごとでスタイルを変えたい時とか。
&lt;pre&gt;&lt;code&gt;// SCSS
.mod {
　color: black;
　font-weight: bold;
　&amp;amp;.hoge { color: red; }
　&amp;amp;.fuga { color: blue; }
}&lt;/code&gt;&lt;/pre&gt;
.modでひとつのモジュールの基本的なスタイルを記述して、.mod.hogeといった感じでclassの複数づけしたときに、基本スタイルから微妙に変化をつけるみたいなやりかたのときとかも便利です。たぶん。&lt;/p&gt;

&lt;p&gt;これもまた、.modのブロックの中に派生するスタイルが１つにまとまっていてナイスな気がします。&lt;/p&gt;

&lt;p&gt;んで、調子こいてこんな風にも&amp;amp;を使うようになりました。
&lt;pre&gt;&lt;code&gt;// local.scss
.kanazawa {
　color: blue;
　.ishikawa &amp;amp; {
　　color: red;
　}
}&lt;/code&gt;&lt;/pre&gt;
親が違う親を持っていた時のスタイルみたいな。なんか文字にすると複雑な家庭事情ですね。心中お察しします。
&lt;pre&gt;&lt;code&gt;/* CSS */
.kanazawa {
　color: blue;}
.ishikawa .kanazawa {
　color: red;}&lt;/code&gt;&lt;/pre&gt;
展開するとなんてことのない感じです。.kanazawaだと横浜の金沢なのか、石川の金沢なのわかんねーから、石川の金沢のときは文字を赤くしましょうよって思想です。たぶん。しらんけど。&lt;/p&gt;

&lt;p&gt;んで、このCSSを流用したい。北陸で流用したいという欲情に駆られたのがこんな感じのHTML。
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;ldquo;hokuriku&amp;rdquo;&amp;gt;
 北陸良いとこ～♪
 &amp;lt;div class=&amp;ldquo;ishikawa&amp;rdquo;&amp;gt;
  細長い県なの～♪
  &amp;lt;div class=&amp;ldquo;kanazawa&amp;rdquo;&amp;gt;
   そこの県庁所在地なの～♪
  &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;ldquo;kanazawa&amp;rdquo;&amp;gt;
  どこの金沢よ～。それどこ情報よ～。俺が寝てないってどこ情報よ～。
 &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
今まで地方レベルで考えてこなかったんだけど、急に、.hokuriku（北陸地方）という上位概念がでてきて、この中でさっきのlocal.scssを流用したい場合。こんな感じなると思う。
&lt;pre&gt;&lt;code&gt;// SCSS
.hokuriku {
 @import &amp;ldquo;local.scss&amp;rdquo;;
}
// つまり↑これは↓これということ。
.hokuriku {
　.kanazawa {
　　color: blue;
　　.ishikawa &amp;amp; {
　　　color: red;
　　}
　}
}&lt;/code&gt;&lt;/pre&gt;
んで、コンパイル。
&lt;pre&gt;&lt;code&gt;.hokuriku .kanazawa {
  color: blue;
}
.ishikawa .hokuriku .kanazawa {
  color: red;
}&lt;/code&gt;&lt;/pre&gt;
問題は2個めのやつですよね。親参照使ったやつ。石川県北陸地方金沢市になっててイミフｗｗｗｗウケるｗｗｗｗｗ&lt;/p&gt;

&lt;p&gt;HTML内では.hokurikuが最も祖先なので、この場合の.ishikawa .hokuriku .kanazawaのスタイルは有効になりませんね。実際のこの問題に出くわしたときは。もっとコード量が多くてなおかつ複雑で、この親参照の仕様をちゃんと理解せずにいたので、理解に時間がかかりました（スタイルがなぜか効かないので!importantしたりとか&amp;hellip;）。なんでメモがてら書いておきました。&lt;/p&gt;

&lt;p&gt;だからといって、&lt;strong&gt;&amp;amp;&lt;/strong&gt;使うなよってことはないです。最初に紹介したリンクパターンやモジュールパターンのような単純に&lt;strong&gt;”親”&lt;/strong&gt;を参照しているものであれば、特に問題ないかと思います。親の更に親が〜といったような使い方も環境（HTML）が変わるようなことがないかぎり、特に問題無いと思うけど、いざ流用したいってなったとき（人生なにが起きるかわかりません）ネストの仕方によっては今回のようなことが起きてしまうなーって。て！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>パフォーマンスからみるSass/Compass 番外編：MSは青かった</title>
      <link>http://localhost:1313/mol/log/compass-ie-hex-str-function/</link>
      <pubDate>Wed, 08 Aug 2012 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/compass-ie-hex-str-function/</guid>
      <description>&lt;p&gt;2回も続いてないのにまさかの番外編！ここぞ変化球！キエル消える魔球！！&lt;/p&gt;

&lt;p&gt;ってことで、最近Androidの相手ばかりしていて、「IE&amp;hellip; そんな女もいたよね」って感じでしたが、ちょっとハマったので忘備録。グラデーションを使ったデザインをCSSで再現しようとした話。ということでCSSグラデーションのスニペットを&lt;a href=&#34;http://www.colorzilla.com/gradient-editor/&#34;&gt;Ultimate CSS Gradient Generator&lt;/a&gt;で吐き出してみたんですわ。
&lt;pre&gt;&lt;code&gt;/* CSS */
.gradient {
 background: -moz-linear-gradient(top, #000 0%, #595959 100%);
 background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#000), color-stop(100%,#595959));
 background: -webkit-linear-gradient(top, #000 0%,#595959 100%);
 background: -o-linear-gradient(top, #000 0%,#595959 100%);
 background: -ms-linear-gradient(top, #000 0%,#595959 100%);
 background: linear-gradient(to bottom, #000 0%,#595959 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=&amp;lsquo;#000&amp;rsquo;, endColorstr=&amp;lsquo;#595959&amp;rsquo;,GradientType=0 );
}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;まぁ、こんな感じなのができますわな。で、意気揚々とIEでチェックしてみたらグラデーションが青かったんですよ！黒色のグラデーションが青かったんですよ！びっくりデスヨ！&lt;/p&gt;

&lt;p&gt;同僚の&lt;a href=&#34;https://twitter.com/hiloki/&#34;&gt;@hiloki&lt;/a&gt;さん曰く、どうやら僕が&lt;em&gt;startColorstr&lt;/em&gt;の部分のHEXカラーを#000000ではなく、#000であとで修正したらからイケなかったらしいです。ちゃんと6バイトで記述したらイケました。どうやらこうゆうことらしいですよ↓
&lt;blockquote&gt;IE does recognize hex colors, but not the kind you&amp;rsquo;re using. Only those with 6 hexadecimals (#RRGGBB) or 8 hexadecimals (#AARRGGBB; only works in the gradient filter!) will work. It will also accept named colors.
&lt;p style=&#34;text-align: right;&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/4737477/why-does-this-css-gradient-show-up-with-the-wrong-colours-in-ie-7&#34;&gt;Why does this CSS gradient show up with the wrong colours in IE 7? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
短縮コード理解できないってどんだけ◯◯なんだよ！ったく！そんな！#000000とか見たら#000にしたくなっちゃうだろ！それが人の性ってもんでしょうに！って同僚に言ったら、そうでもないらしいですね&amp;hellip;.&lt;/p&gt;

&lt;p&gt;まぁ今回は僕の手癖が悪かったからしょうが無いとしても、縮小化ツールによっては短縮しちゃうものもあるでしょ？というか&lt;a href=&#34;http://sass-lang.com/docs/yardoc/file.SASS_CHANGELOG.html#_style&#34;&gt;Sassの:compressedにしたら短縮&lt;/a&gt;してしまうやん（v3.1.20はしなかったけど）どーしたらいいですかね&amp;hellip;
&lt;h2&gt;Compass: ie-hex-str()&lt;/h2&gt;
まぁ&lt;a href=&#34;https://github.com/nex3/sass/issues/280&#34;&gt;同じような問題にぶち当たった人&lt;/a&gt;も多く、回避策としてはどうやらie-hex-str()ってCompassの関数を使えば良いとのこと。
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://kuroir.com/post/14557689480/compass-ie-hex-str  &#34;&gt;Compass: ie-hex-str() | Mario &amp;ldquo;Kuroir&amp;rdquo; Ricalde&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
これを使うと、#000やblackと指定しても
&lt;pre&gt;&lt;code&gt;// SASS
@import &amp;ldquo;compass&amp;rdquo;;
.ms-gradient {
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=&amp;lsquo;#{ie-hex-str(#000)}&amp;rsquo;, endColorstr=&amp;lsquo;#595959&amp;rsquo;,GradientType=0 );
}&lt;/code&gt;&lt;/pre&gt;
このようにコンパイルされます。
&lt;pre&gt;&lt;code&gt;/* CSS */
.ms-gradient {
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=&amp;lsquo;#FF000000&amp;rsquo;, endColorstr=&amp;lsquo;#595959&amp;rsquo;,GradientType=0 );
}&lt;/code&gt;&lt;/pre&gt;
8バイトになってるのは、#AARRGGBBってことで、最初の2バイトはアルファ値でFFだから不透明度100%ってことですね。これはIEさん認識できるらしいです。いやしかしですよ、IEごときで、なにゆえCompassをインストールしなきゃならんのか！面倒くさい！ってことで、ブライトネス1%上げて短縮されないように#010101にしました。&lt;/p&gt;

&lt;p&gt;そもそも画像でやれよ！って言うのは無しね！HTTPリクエスト減らしてなんぼだかんね！&lt;/p&gt;

&lt;p&gt;んで、最初のバグに戻るけどなんで黒いのグラデーションが青色になったのかというと、startColorが#000で認識できなかったので、Default Color が青だからそれが適用されたんだね！
&lt;blockquote&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;Default. Blue.&lt;/p&gt;
&lt;p style=&#34;text-align: right;&#34;&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms532930(v=VS.85).aspx&#34;&gt;StartColorStr Property (Gradient) &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;なるほど！バイバイ！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>じゃ僕もCSSプロパティの書き順とか</title>
      <link>http://localhost:1313/mol/log/css-property-order/</link>
      <pubDate>Sat, 28 Feb 2009 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/css-property-order/</guid>
      <description>&lt;p&gt;CSSプロパティ記述順序を晒すのが流行ってるみたいなのでｗ&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://css-happylife.com/log/zakki/000738.shtml&#34;&gt;自分のプロパティの書き順とか｜CSS HappyLife&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.hamashun.com/blog/2009/02/css_11.html&#34;&gt;じゃあ俺もCSSの書き方を書くよ！ | Blog hamashun.com&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://redline.hippy.jp/lab/css/post_55.php&#34;&gt;RedLine Magazine : 自分もプロパティの書き順とか&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img src=&#34;http://lh6.ggpht.com/_1drnogi3vdg/SaiZMJhJDqI/AAAAAAAAASE/jVtYBAybC0s/css-property-order-sheet.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&lt;a href=&#34;http://ijok.ijok.googlepages.com/css-property-order-sheet.pdf&#34;&gt;CSS Property Order Sheet(PDF)&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;基本Mozillaが薦める順序で書いてます（↑赤字部分）&lt;br /&gt;&lt;blockquote&gt;/&lt;em&gt;Suggested order:&lt;br /&gt;&lt;/em&gt; display&lt;br /&gt;* list-style&lt;br /&gt;* position&lt;br /&gt;* float&lt;br /&gt;* clear&lt;br /&gt;* width&lt;br /&gt;* height&lt;br /&gt;* margin&lt;br /&gt;* padding&lt;br /&gt;* border&lt;br /&gt;* background&lt;br /&gt;* color&lt;br /&gt;* font&lt;br /&gt;* text-decoration&lt;br /&gt;* text-align&lt;br /&gt;* vertical-align&lt;br /&gt;* white-space&lt;br /&gt;* other text&lt;br /&gt;* content&lt;br /&gt;*/&lt;br /&gt;&lt;div style=&#34;text-align: right;&#34;&gt;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://www.mozilla.org/css/base/content.css&#34;&gt;mozilla.org Base Styles&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br /&gt;んで、足りないとこをkaminogoyaさんの&lt;a href=&#34;http://2xup.org/log/2006/07/11-1956&#34;&gt;スタイルシートを書く時のガイドライン&lt;/a&gt;で補った感じです。チートシートないとわからんですね、はいｗ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vertical-alignの値</title>
      <link>http://localhost:1313/mol/log/vertical-align/</link>
      <pubDate>Fri, 04 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/vertical-align/</guid>
      <description>&lt;p&gt;&lt;a onblur=&#34;try {parent.deselectBloggerImageGracefully();} catch(e) {}&#34; href=&#34;http://4.bp.blogspot.com/_1drnogi3vdg/R34qyyF049I/AAAAAAAAACE/0ufjAdD8DuI/s1600-h/valign.png&#34;&gt;&lt;img style=&#34;margin: 0pt 10px 10px 0pt; float: left; cursor: pointer;&#34; src=&#34;http://4.bp.blogspot.com/_1drnogi3vdg/R34qyyF049I/AAAAAAAAACE/0ufjAdD8DuI/s200/valign.png&#34; alt=&#34;&#34; id=&#34;BLOGGER_PHOTO_ID_5151602075686462418&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;自分だけかもしれないけど、&lt;br /&gt;vertical-alignって数値指定（1pxとか-2em）できるんだね。&lt;br /&gt;知らなかった。。。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;いつも、top, middle, bottomしか使わなくて、画像によっては微妙にずれたりして、&lt;br /&gt;歯がゆい思いしてたけど、数値で指定すれば問題なしですね。うまいことできてるわ。&lt;br /&gt;&lt;br /&gt;ので、&lt;a style=&#34;font-weight: bold;&#34; href=&#34;http://ijok.ijok.googlepages.com/valign.html&#34;&gt;サンプル&lt;/a&gt;作ってみた。&lt;br /&gt;&lt;br /&gt;数値はプラスでもマイナスでもＯＫ。&lt;br /&gt;基準はベースラインからどんだけ離れているか。&lt;br /&gt;パーセント指定はline-heightから算出される。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(X)HTML&#43;CSSガイドライン3</title>
      <link>http://localhost:1313/mol/log/xhtml-css-guideline/</link>
      <pubDate>Sun, 07 Oct 2007 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/xhtml-css-guideline/</guid>
      <description>&lt;p&gt;CSSプロパティ記述順序っていろいろありますよね、
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.mozilla.org/css/base/content.css&#34;&gt;mozilla suggested order&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://2xup.org/log/2006/07/11-1956&#34;&gt;スタイルシートを書く時のガイドライン&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://hail2u.net/blog/webdesign/css2-property-order.html&#34;&gt;CSS2 Specificationでのプロパティの出現順序&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
↑こんな具合に。 どれを選べばいいんじゃーと悩んだので、いいとこ取りしてみた。 &lt;a href=&#34;http://3.bp.blogspot.com/_1drnogi3vdg/Rwjh2JuciAI/AAAAAAAAABU/CbZoHZm6UtE/s1600-h/css-property-order-sheet.png&#34;&gt;
&lt;/a&gt;&lt;a href=&#34;http://ijok.ijok.googlepages.com/css-property-order-sheet.pdf&#34;&gt;CSS Property Order Sheet(PDF)&lt;/a&gt;基本モジラベースで足りないところをkaminogoyaさんのガイドラインを足してみた。 『ページ出力』も足してみた。 『聴覚スタイルシート』は引いてみた。 CSS2.1で削除されたプロパティは引いてみた。
&lt;ul&gt;
    &lt;li&gt;font-size-adjust&lt;/li&gt;
    &lt;li&gt;font-stretch&lt;/li&gt;
    &lt;li&gt;text-shadow&lt;/li&gt;
    &lt;li&gt;marker-offset&lt;/li&gt;
    &lt;li&gt;size&lt;/li&gt;
    &lt;li&gt;marks&lt;/li&gt;
    &lt;li&gt;page&lt;/li&gt;
&lt;/ul&gt;
んで思ったこと、これに同意↓ &lt;a href=&#34;http://d.hatena.ne.jp/milkmeta/20060817/1155835982&#34;&gt;「CSSの記述ルール」が不要になる時代はいつ来るのかなぁ……というぼやき話&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(X)HTML&#43;CSSガイドライン2</title>
      <link>http://localhost:1313/mol/log/xhtml-css-guideline-2/</link>
      <pubDate>Mon, 17 Sep 2007 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/xhtml-css-guideline-2/</guid>
      <description>&lt;p&gt;命名に関することで参考になったサイト&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://www.hamashun.com/blog/2006/09/classid.html&#34;&gt;Class名とID名の命名規則&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://css-happylife.com/log/memo/000100.shtml&#34;&gt;もう、class名やid名で悩まないんだからっ！！&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://purpr.in/presentation/cssflight/&#34;&gt;(X)HTML の id/class における命名規則&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://code.google.com/webstats/2005-12/classes.html&#34;&gt;Which class names are used on the most pages? &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;ワイヤーフレームのID名の例が多くて、&lt;br /&gt;その中のClassは一体どうゆう名前をつけたらいいんだ！&lt;br /&gt;&lt;br /&gt;って思いました。&lt;br /&gt;&lt;br /&gt;ということで、それっぽい英単語を英辞郎で調べてみました。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;p style=&#34;float: left; width: 250px;&#34;&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;class名に使えそうな単語とか&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;・canto / division　編/部&lt;br /&gt;・chapter　章&lt;br /&gt;・section　節&lt;br /&gt;・paragraph　項&lt;br /&gt;・item　目&lt;br /&gt;・column　記事・欄&lt;br /&gt;・article　記事・項目&lt;br /&gt;・topic　題目・主題　&lt;br /&gt;・lead　序文&lt;br /&gt;・outline　輪郭・概要　&lt;br /&gt;・epigraph　題辞&lt;br /&gt;・remark　コメント&lt;br /&gt;・sidenote　補足項目&lt;br /&gt;・area　範囲・領域　&lt;br /&gt;・spot　場所・点&lt;br /&gt;・account　説明&lt;br /&gt;・piece　記事・要素&lt;br /&gt;・matter　事柄・内容&lt;br /&gt;・report　記事・報告&lt;br /&gt;・story　記事・物語&lt;br /&gt;・bottom-line　結論&lt;br /&gt;・conclusion　結論&lt;br /&gt;・chart　表&lt;br /&gt;・diagram　図&lt;br /&gt;・figure　図&lt;br /&gt;・graphic　図&lt;br /&gt;・principal-text　主文&lt;br /&gt;・sentence　文&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;br /&gt;・rank　階級・階層&lt;br /&gt;・group　グループ&lt;br /&gt;・category　カテゴリー&lt;br /&gt;・cover　カバー&lt;br /&gt;・construct　構造物・構図&lt;br /&gt;・composition　構成・組織&lt;br /&gt;・thumbnail　サムネイル&lt;br /&gt;・data　データ&lt;br /&gt;・logo　ロゴ&lt;br /&gt;・topicpath　パンくずナビ&lt;br /&gt;・external　外部&lt;br /&gt;・feed　フィードなど&lt;br /&gt;・ｍore　詳細&lt;br /&gt;・datetime　日時&lt;br /&gt;・message メッセージ&lt;br /&gt;・ads　広告類&lt;br /&gt;・banners　バナー類&lt;br /&gt;・photos　写真類&lt;br /&gt;・case　ケース・件&lt;br /&gt;・search-box　検索ボックス&lt;br /&gt;・key-point　主要な注釈&lt;br /&gt;・example　例&lt;br /&gt;・toc　目次（table of contents）&lt;br /&gt;・index　索引・見出し&lt;br /&gt;・selector‒inner&lt;br /&gt;・selector‒first&lt;br /&gt;・selector‒second&lt;br /&gt;・selector‒third&lt;/p&gt;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;br /&gt;関連エントリー&lt;br /&gt;&lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://warikiru.blogspot.com/2007/09/xhtmlcss.html&#34;&gt;warikiru: (X)HTML+CSSガイドライン1&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://warikiru.blogspot.com/2007/10/xhtmlcss3.html&#34;&gt;warikiru: (X)HTML+CSSガイドライン3&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(X)HTML&#43;CSSガイドライン１</title>
      <link>http://localhost:1313/mol/log/xhtml-css-guideline-1/</link>
      <pubDate>Fri, 07 Sep 2007 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/xhtml-css-guideline-1/</guid>
      <description>&lt;p&gt;・ガイドライン制作にあたって参考にしたサイトリスト&lt;a href=&#34;http://cybergarden.jp/cssnite07/&#34;&gt;&lt;br /&gt;&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://cybergarden.jp/cssnite07/&#34;&gt;CSS Nite Vol.7 Web制作現場の対立を解消する！(X)HTML+CSSガイドライン作り&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.cybergarden.net/blog/2005/12/xhtml_optimization.html&#34;&gt;XHTMLの最適化手法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://mynotes.jp/misc/markup_principle&#34;&gt;マークアップの指針&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://tekapo.com/mozilla/tr/markup.html&#34;&gt;mozilla.org マークアップリファレンス&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://bigchu.com/ccg/index.html&#34;&gt;CSS Coding Guideline&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www6.plala.or.jp/go_west/nextcss/tip/how2write.htm&#34;&gt;CSSの書き方諸々&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.ironhearts.com/diary/archives/000829.html&#34;&gt;『CSSバグ辞典スレッド』の要約の要約&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/cover.html&#34;&gt;HTML 4.01仕様書&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.y-adagio.com/public/standards/tr_css2/toc.html&#34;&gt;Cascading Style Sheets, Level 2&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.doraneko.org/webauth/xhtml10/20000126/Overview.html&#34;&gt;XHTML1.0: 拡張可能ハイパーテキストマークアップ言語&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.zspc.com/documents/wcag10/&#34;&gt;ウェブコンテンツ・アクセシビリティ・ガイドライン 1.0&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span style=&#34;font-size:85%;&#34;&gt;関連エントリー&lt;br /&gt;&lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://warikiru.blogspot.com/2007/09/xhtmlcss2.html&#34;&gt;warikiru: (X)HTML+CSSガイドライン2&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-size:85%;&#34;&gt;&lt;a href=&#34;http://warikiru.blogspot.com/2007/10/xhtmlcss3.html&#34;&gt;warikiru: (X)HTML+CSSガイドライン3&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designer meets Designers 01 (CSS)</title>
      <link>http://localhost:1313/mol/log/designer-meets-designers-01-css/</link>
      <pubDate>Sun, 12 Aug 2007 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/designer-meets-designers-01-css/</guid>
      <description>

&lt;p&gt;金曜日は東京にMdNが主催するDesigner meets Designers 01に参加した。テーマは「CSS」ということでみっちり約5時間CSS漬け。&lt;/p&gt;

&lt;h3 id=&#34;session-1-cssのもっとも基本的なルール-島根未央:6b0acd8f41ace0ea86c2bbbb970a1f33&#34;&gt;SESSION 1　CSSのもっとも基本的なルール (島根未央)&lt;/h3&gt;

&lt;p&gt;うん、基本だー、基本すぎる。おさらい的なことは必要ですかね。&lt;/p&gt;

&lt;h3 id=&#34;session-2-css生成ツールとして見たdreamweaver-vs-expression-矢野-りん:6b0acd8f41ace0ea86c2bbbb970a1f33&#34;&gt;SESSION 2　CSS生成ツールとして見たDreamweaver VS Expression (矢野 りん)&lt;/h3&gt;

&lt;p&gt;Expressionの機能でHTML上の要素に指定されたid,class属性をクリックするとその指定したid,classのCSSまでジャンプしてくれるってのが便利だー。でもUIがofficeのWORD、さすがMS。やっぱりDreamweaverが好きです。&lt;/p&gt;

&lt;h3 id=&#34;session-3-css最新コーディングテクニック-小林信次:6b0acd8f41ace0ea86c2bbbb970a1f33&#34;&gt;SESSION 3　CSS最新コーディングテクニック (小林信次)&lt;/h3&gt;

&lt;p&gt;チーム内でCSSコーディングガイドラインをちゃんと決めよーやってお話。プロパティの順序だったり、命名規則、リセットCSSちゃんと話してみんなで決めていくべき！そして文書化、共有！&lt;/p&gt;

&lt;h3 id=&#34;session-4-cssデザインの落とし穴-こもりまさあき:6b0acd8f41ace0ea86c2bbbb970a1f33&#34;&gt;SESSION 4　CSSデザインの落とし穴 (こもりまさあき)&lt;/h3&gt;

&lt;p&gt;懐の広いプレゼン内容とともになんとも落ち着いた声のトーン。安心しきって熟睡してしまった、不覚。。。&lt;/p&gt;

&lt;h3 id=&#34;session-5-実践-cssデザインの-型-でみる視覚表現テクニック-境-祐司:6b0acd8f41ace0ea86c2bbbb970a1f33&#34;&gt;SESSION 5　実践！CSSデザインの「型」でみる視覚表現テクニック (境 祐司)&lt;/h3&gt;

&lt;p&gt;CSSは生ものであり、常に変化するものだから情報収集は怠ってはならない。書籍化されてる時点で最新の情報とは言えない。それゆえウェブ上のコミュニティなどにも常に気にかけてなければならい。つまり、英語読め！ってゆうことです。臆せず、 エキサイトの爆笑翻訳でも使って、感じでもいいからつかみなさいと。耳が痛いです(&amp;gt;&amp;lt;) とまぁこんな感じでした（謎） 英語読もう。&lt;/p&gt;

&lt;div class=&#34;azlink-box&#34; style=&#34;margin-bottom:0px&#34;&gt;&lt;div class=&#34;azlink-image&#34; style=&#34;float:left&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4900790052/warikiru-22/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/5159GS1DE1L._SL160_.jpg&#34; alt=&#34;DUO 3.0&#34; style=&#34;border:none&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;azlink-info&#34; style=&#34;float:left;margin-left:15px;line-height:120%&#34;&gt;&lt;div class=&#34;azlink-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4900790052/warikiru-22/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;DUO 3.0&lt;/a&gt;&lt;div class=&#34;azlink-powered-date&#34; style=&#34;font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%&#34;&gt;posted at 2015.1.15&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-detail&#34;&gt;鈴木 陽一&lt;br /&gt;アイシーピー&lt;br /&gt;売り上げランキング: 46&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;azlink-link&#34; style=&#34;margin-top:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4900790052/warikiru-22/&#34; target=&#34;_blank&#34;&gt;Amazon.co.jp で詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-footer&#34; style=&#34;clear:left&#34;&gt;&lt;/div&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>