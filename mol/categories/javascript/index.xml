<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on MOL</title>
    <link>http://localhost:1313/mol/categories/javascript/</link>
    <description>Recent content in Javascript on MOL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <lastBuildDate>Fri, 06 Sep 2013 00:00:00 UTC</lastBuildDate>
    <atom:link href="http://localhost:1313/mol/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cascading Style Sheets</title>
      <link>http://localhost:1313/mol/log/cascading-style-sheets/</link>
      <pubDate>Fri, 06 Sep 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/cascading-style-sheets/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://imgur.com/Q3cUg29&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-5340&#34; alt=&#34;css&#34; src=&#34;/static/blog/2013/05/css.gif&#34; width=&#34;640&#34; height=&#34;480&#34; /&gt;&lt;/a&gt;
&lt;ul&gt;
    &lt;li&gt; &lt;a href=&#34;http://imgur.com/Q3cUg29&#34;&gt;CSS - Imgur &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>grunt-contribさえあればOK！</title>
      <link>http://localhost:1313/mol/log/grunt-contrib/</link>
      <pubDate>Tue, 05 Mar 2013 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/grunt-contrib/</guid>
      <description>&lt;p&gt;世の中、Grunt0.4が出たって持ちきりでやんス。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gruntjs.com/blog/2013-02-18-grunt-0.4.0-released&#34;&gt;Grunt 0.4.0 released - Grunt: The JavaScript Task Runner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今までビルトインタスクだった下記はことごとくgrunt-contrib-*シリーズと呼ばれるプラグインに置き換わってしまった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;concat&lt;/strong&gt;  grunt-contrib-concat plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt;  stand-alone grunt-init utility&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lint&lt;/strong&gt;  grunt-contrib-jshint plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;min&lt;/strong&gt;  grunt-contrib-uglify plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;qunit&lt;/strong&gt;  grunt-contrib-qunit plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;server&lt;/strong&gt;  grunt-contrib-connect plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;test&lt;/strong&gt;  grunt-contrib-nodeunit plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;watch&lt;/strong&gt;  grunt-contrib-watch plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もし諸君がconcat、lint、minといったタスクをGrunt 0.4でも使いたい場合は、このように書いてないだろうか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gruntjs.com/upgrading-from-0.3-to-0.4&#34;&gt;Upgrading from 0.3 to 0.4 - Grunt: The JavaScript Task Runner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;module.exports = function(grunt) {
  // Project configuration.
  grunt.initConfig({
    pkg: grunt.file.readJSON(&#39;package.json&#39;),
    uglify: { .... },
    min: { .... },
    concat: { .... },
    lint: { .... },
    }
  });
  // Load the plugins
  grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-min&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-concat&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-lint&#39;);
  // Default task.
  grunt.registerTask(&#39;default&#39;, [&#39;uglify&#39;]);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;contribシリーズのタスクを利用したいのなら、全部入りの&lt;strong&gt;&lt;a href=&#34;https://github.com/gruntjs/grunt-contrib&#34;&gt;grunt-contrib&lt;/a&gt;&lt;/strong&gt;をひとつ読みこむだけで利用できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Load the plugin
grunt.loadNpmTasks(&#39;grunt-contrib&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;grunt-contribなかに全部入ってるんだね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/mol/file/2013/03/ss.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;※ とはいえgrunt-contribだとアップデートはひとまとめになるので、各contribの最新版を使いたいのなら個別に管理したほうがいいかも&lt;/p&gt;

&lt;p&gt;そんだけ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jsoff：ワンクリックでJavaScriptをオフれるChrome拡張機能</title>
      <link>http://localhost:1313/mol/log/jsoff/</link>
      <pubDate>Fri, 23 Mar 2012 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/jsoff/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/kjhbibcocglfnpllfodaiabanmmegomm?hl=ja&#34;&gt;&lt;img class=&#34;aligncenter fig&#34; title=&#34;jsoff&#34; src=&#34;/static/blog/2012/03/01.png&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;100&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
ChromeってJavaScriptオフにしようと思うと、設定 &amp;gt; 高度な設定 &amp;gt; コンテンツ設定 と階層を降りないとできないからめんどくさいねーということをTwitterで見かけたので、Chrome Extensionの勉強も兼ねて作ってみた。
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/kjhbibcocglfnpllfodaiabanmmegomm?hl=ja&#34;&gt;Chrome ウェブストア - jsoff &lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;/static/blog/2012/03/00.png&#34;&gt;&lt;img class=&#34;aligncenter  fig&#34; title=&#34;Contents Settings&#34; src=&#34;/static/blog/2012/03/00.png&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;355&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
インストールすると右上に&lt;strong&gt;サイ&lt;/strong&gt;のアイコンが出てくるので、クッリクでオン・オフ切り替える事ができます。ただそれだけです。よかったら使ってくださしあ＞＜
&lt;p style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;/static/blog/2012/03/02.png&#34;&gt;&lt;img class=&#34;aligncenter  fig&#34; title=&#34;例&#34; src=&#34;/static/blog/2012/03/02.png&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;167&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;更新履歴&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;sup&gt;2012&lt;/sup&gt;&amp;frasl;&lt;sub&gt;09&lt;/sub&gt;/18: Manifest v2に対応。アイコン画像の軽量化&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>html5shim vs html5shiv</title>
      <link>http://localhost:1313/mol/log/html5shim-vs-html5shiv/</link>
      <pubDate>Mon, 12 Dec 2011 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/html5shim-vs-html5shiv/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://atnd.org/events/21980&#34;&gt;JavaScript Advent Calendar 2011 (オレ標準コース) &lt;/a&gt;12日目の id:t32k です。去年も参加しましたがなんでもありと聞いて今年も懲りずに参加！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://keycss.com/html5/html5shim-vs-html5shiv.html&#34;&gt;&lt;img title=&#34;Don’t lose any more time.&#34; src=&#34;/static/blog/2011/12/same.png&#34; alt=&#34;Don’t lose any more time. html5shim and html5shiv are exactly the same thing.&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;はじめに言っておきますが、html5shimもhtml5shivどっちもまったく同じです。違いなんて無いので、こんなことに頭を悩ませる暇があったらさっさとコードでも書いてろ！以上！うんこ(・∀・)!&lt;/p&gt;

&lt;p&gt;そんなこと言っても世の中結果じゃない、過程が大切だと思うんだ先生！ってことで今回は調べてみます。&lt;/p&gt;

&lt;p&gt;html5shi(m|v)、めんどくさいので以下html5.jsは&amp;rdquo;HTML5 IE enabling script&amp;rdquo;の名の通り、IE8以下で&lt;em&gt;article&lt;/em&gt;などの新要素が正しく認識されずスタイル(CSS)がうまく適用されない問題を解決しそれらのブラウザでも利用可能にしてくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.createElement(&amp;quot;article&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じにDOMで要素を生成すると、IEでもHTML5の要素にスタイルを効くようになります。実際のhtml5.jsはもっと複雑だけど基本的にはこんなことをやってます。詳しいことは下記スライド参照で。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://prog.re-d.net/demo/slide/20101218/index.html&#34;&gt;HTML5.jsの中身を見てみよう&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/#!/kamiyam&#34;&gt;@kamiyam&lt;/a&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-s-the-difference:fb15c3e27c3e8abab9ce86de2bb5acf5&#34;&gt;What&amp;rsquo;s the difference?&lt;/h2&gt;

&lt;p&gt;そろそろHTML5でサイト作ってみっかーということでいろいろググってたら前述の問題に引っかかり、さらにググってみると同じ機能なのに名前が違う2つのスクリプトがあることを認識たのが今回の経緯です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/html5shim/&#34;&gt;html5shim - HTML5 IE enabling script - Google Project Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/html5shiv/&#34;&gt;html5shiv - HTML5 IE enabling script - Google Project Hosting &lt;/a&gt;
&lt;/ul&gt;
Google Codeにホスティングされている2つのコードを見比べても全く同じです。謎です。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Common question:&lt;/strong&gt; what&amp;rsquo;s the difference between the html5shim and the html5shiv?
&lt;strong&gt;Answer:&lt;/strong&gt; nothing, one has an m and one has a v - that&amp;rsquo;s it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と思ったら、似たような疑問を持つ人も多いのかよくある質問が用意されていました。&lt;/p&gt;

&lt;p&gt;”違いなんて無いよ！片方はmで、片方がvなだけ。それだけ！”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;!--[if lt IE 9]&amp;amp;gt;
 &amp;amp;lt;script src=&amp;quot;/common/js/html5shiv.js&amp;quot;&amp;amp;gt;&amp;amp;lt;/script&amp;amp;gt;
&amp;amp;lt;![endif]--&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※最近ではGoogle Codeにホスティングされているものを参照するのではなく、自鯖に落としてきて使用することが&lt;a href=&#34;http://www.skyward-design.net/blog/archives/000134.html&#34;&gt;推奨されています&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;お&amp;hellip; また敷かれたレールを疑問も持たずに走ってればいいんだよ的な回答ですね。そんなの求めていないんだ！僕は！じゃーなぜ2つあるんだよ！どっち使えばいいんだよ！と遅れてきた反抗期によって僕はあきらめません。&lt;/p&gt;

&lt;p&gt;まずは単語の意味から&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;【名詞】【可算名詞】
(ものを水平にしたり，すき間などに入れる)詰め木[金]
&lt;a href=&#34;http://ejje.weblio.jp/content/shim&#34;&gt; shimの意味 - 英和辞典 Weblio辞書 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【名詞】【可算名詞】
《米俗》 (ジャック)ナイフ
&lt;a href=&#34;http://ejje.weblio.jp/content/shiv&#34;&gt; shivの意味 - 英和辞典 Weblio辞書 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ふむふむ、&amp;rdquo;shim&amp;rdquo; の方は詰め木ということで足りない機能を補完（カバー）する意味合いでも取れて、&lt;a href=&#34;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills&#34;&gt;polyfill&lt;/a&gt;みたいな感じですかね？。&amp;rdquo;shiv&amp;rdquo; はナイフ&amp;hellip;どーゆこっちゃ＞＜&lt;/p&gt;

&lt;h2 id=&#34;the-story-of-the-html5-shiv:fb15c3e27c3e8abab9ce86de2bb5acf5&#34;&gt;The Story of the HTML5 Shiv&lt;/h2&gt;

&lt;p&gt;行き詰まり感たっぷりだったところに、&lt;a href=&#34;http://t32k.me/mol/log/trackhtml5inga-with-modernizr/&#34;&gt;Modernizr&lt;/a&gt; の開発者でも有名なPaul Irishさんが、&lt;a href=&#34;http://paulirish.com/2011/the-history-of-the-html5-shiv/&#34;&gt;The Story of the HTML5 Shiv &lt;/a&gt;というドンピシャなタイトルの記事をあげていました。&lt;/p&gt;

&lt;p&gt;この記事の前半部分をざっくりまとめてみると、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2007年くらい&lt;/strong&gt;
■ developers:
新要素にCSS効かなくね？やばくねｗ？あれれｗｗ？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2008年&lt;/strong&gt;&lt;br /&gt;
■ &lt;a href=&#34;http://intertwingly.net/blog/2008/01/22/Best-Standards-Support#c1201006277&#34;&gt; Sjoerd Visscher&lt;/a&gt;（初めてこのテクニックを披露した人）：
createElementしたらええで〜ｗｗｗ&lt;/p&gt;

&lt;p&gt;■ &lt;a href=&#34;http://ln.hixie.ch/?start=1201080691&amp;amp;count=1&#34;&gt; Ian Hickson&lt;/a&gt;（HTML5のエライ人）：
これマジパネェｗｗｗこれ使ったらIE7の互換shim簡単に作れるわーｗｗｗｗ&lt;/p&gt;

&lt;p&gt;■ &lt;a href=&#34;http://ejohn.org/blog/html5-shiv/&#34;&gt;John Resig&lt;/a&gt;（jQuery作った人）：
CSS効かせる方法、HTML5 Shivって名前つけたわーｗｗ（shimだけど）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2009年&lt;/strong&gt;
■ &lt;a href=&#34;http://remysharp.com/2009/01/07/html5-enabling-script/&#34;&gt; Remy Sharp&lt;/a&gt;（初めてhtml5.jsをディストリビュートした人）：
HTML5 ShivのやつGoogle Codeにホスティングしといたわーｗｗ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2010年&lt;/strong&gt;
■ &lt;a href=&#34;http://code.google.com/p/html5shim/source/detail?r=2&#34;&gt;Remy Sharp&lt;/a&gt;：
html5shimでミラー作っておいたわーｗｗｗ&lt;/p&gt;

&lt;p&gt;だいたいこんな感じですな。&lt;/p&gt;

&lt;h2 id=&#34;shiv:fb15c3e27c3e8abab9ce86de2bb5acf5&#34;&gt;Shiv?&lt;/h2&gt;

&lt;p&gt;ここで問題なのは、なんでRemy Sharpさんあとからhtml5shimのミラーを 公開したのか？ということですね。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;shiv&amp;rdquo; って単語がコンピューター用語で言う互換性のため回避策といった意味が一般認識されていなかったのではないかという仮説が僕の中で湧いてきました。&lt;/p&gt;

&lt;p&gt;試しに&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;で &lt;a href=&#34;https://github.com/search?q=shiv&amp;amp;type=Everything&amp;amp;repo=&amp;amp;langOverride=&amp;amp;start_value=1&#34;&gt;&amp;ldquo;shiv&amp;rdquo; で レポジトリ検索&lt;/a&gt;をしてみると17件、&lt;a href=&#34;https://github.com/search?type=Everything&amp;amp;language=&amp;amp;q=shim&amp;amp;repo=&amp;amp;langOverride=&amp;amp;x=0&amp;amp;y=0&amp;amp;start_value=1&#34;&gt;&amp;ldquo;shim&amp;rdquo;で検索&lt;/a&gt;すると93件ヒットしました。&amp;rdquo;shiv&amp;rdquo; に関してはhtml5shivに関しての内容ばかりで、他のものも新しいライブラリです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ejohn.org/blog/html5-shiv/#comment-296934&#34;&gt;2008年のJohn Resig氏のエントリのコメント&lt;/a&gt;においても、「shimじゃなくてshiv?」といった内容が見受けられます。&lt;/p&gt;

&lt;p&gt;しかし、Wikipediaの&lt;a href=&#34;http://en.wikipedia.org/wiki/Shim_(computing)&#34;&gt;Shim (computing)&lt;/a&gt;の項目には、&amp;rdquo;a shim (from shim) or &lt;strong&gt;shiv&lt;/strong&gt; is a small library which&amp;hellip;&amp;ldquo;とまぁなんか互換性のため回避策の意味として記述されています&amp;hellip;&lt;/p&gt;

&lt;p&gt;え、そうなの？なんでじゃ！ということで、例によって反抗期の僕には&lt;a href=&#34;http://en.wikipedia.org/w/index.php?title=Shim_(computing)&amp;amp;action=history&#34;&gt;wikiの変更履歴&lt;/a&gt;を見てみるとありました。21:20, 16 November 2011‎ までは Shim (computing)の項目に &amp;rdquo;shiv&amp;rdquo; って単語はなかった。なんだ最近、追記されてんじゃん！&lt;/p&gt;

&lt;p&gt;まぁ少なくとも2008年のJohn Resigが書いたエントリの時点では &amp;ldquo;shiv&amp;rdquo; に「互換性のため回避策」といった意味がなかったのではないかと推測できます。&lt;/p&gt;

&lt;h2 id=&#34;conclusion:fb15c3e27c3e8abab9ce86de2bb5acf5&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;で結局、&lt;strong&gt;ここからは妄想&lt;/strong&gt;になるんだけど、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2008年&lt;/strong&gt;
■ &lt;a href=&#34;http://ejohn.org/blog/html5-shiv/&#34;&gt;John Resig&lt;/a&gt;（jQuery作った人）：
CSS効かせる方法、HTML5 Shivって名前つけたわーｗｗ
やってることはshimだけど、shivの方が武器っぽくって強そうじゃんｗｗｗドヤｗｗ&lt;/p&gt;

&lt;p&gt;■ developers1:
shivじゃなくてshimだろｗｗワロスｗｗｗ&lt;/p&gt;

&lt;p&gt;■ developers2:
html5shivいいねｗｗｗｗｗイカスｗｗｗｗｗ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2010年&lt;/strong&gt;
■ &lt;a href=&#34;http://code.google.com/p/html5shim/source/detail?r=2&#34;&gt;Remy Sharp&lt;/a&gt;：
html5shivでホスティングしたったーけどｗｗｗｗ
html5shimの方が意味的に分かりやすいし一応こっちも作っとくかーｗｗ&lt;/p&gt;

&lt;p&gt;そんな経緯ですかね&amp;hellip;&lt;strong&gt;”なぜ”&lt;/strong&gt;そうしたのかって部分が言及されて（見つから）なかったので、あくまで上記は僕の&lt;strong&gt;妄想&lt;/strong&gt;ですからあしからず。知ってる人いたら教えてください。&lt;/p&gt;

&lt;p&gt;てか、&lt;a href=&#34;http://www.modernizr.com/download/&#34;&gt;Modernizrにバンドリングされてる&lt;/a&gt;し、そっち使ったらいいんじゃないっすかねー（by &lt;a href=&#34;https://twitter.com/#!/5509&#34;&gt;@5509&lt;/a&gt;）&lt;/p&gt;

&lt;h2 id=&#34;参考:fb15c3e27c3e8abab9ce86de2bb5acf5&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/HTML5_Shiv&#34;&gt;HTML5 Shiv - Wikipedia, the free encyclopedia &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ejohn.org/blog/html5-shiv/&#34;&gt;John Resig - HTML5 Shiv &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://remysharp.com/2009/01/07/html5-enabling-script/&#34;&gt;HTML5 enabling script | remy sharp&amp;rsquo;s b:log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://paulirish.com/2011/the-history-of-the-html5-shiv/&#34;&gt;The Story of the HTML5 Shiv « Paul Irish &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Shim_(computing)&#34;&gt;Shim (computing) - Wikipedia, the free encyclopedia &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>WebデザイナーだけどiPhoneカメラアプリ、リリースできました！</title>
      <link>http://localhost:1313/mol/log/nyars/</link>
      <pubDate>Mon, 02 May 2011 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/nyars/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/jp/app/nyars/id433610083?mt=8&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://itunes.apple.com/jp/app/nyars/id433610083?mt=8&#34;&gt;&lt;img class=&#34;alignleft size-medium wp-image-3120&#34; title=&#34;icon&#34; src=&#34;/static/blog/2011/05/icon-187x300.png&#34; alt=&#34;&#34; height=&#34;280&#34; /&gt;&lt;/a&gt;あたしWebデザイナーだけど、制作期間実質1週間（コードだけなら3日）でiPhoneカメラアプリを制作して、今日リリースまでこぎつけることができました。&lt;/p&gt;

&lt;p&gt;単にネコミミ画像をオーバーレイして写真が撮れるだけのアプリだけど、Objective-Cなにそれ？おいしいの？ってくらいの認識しかなかったデザイナーになにゆえ作れたか？&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Titanium Mobile!&lt;/h2&gt;
はい、ひとえに &lt;a href=&#34;http://www.appcelerator.com/&#34;&gt;Titanium Mobile&lt;/a&gt; 様様でございます。&lt;/p&gt;

&lt;p&gt;思いおこせば、iPhoneアプリ開発できたらカッコイイだろうなと思ってObjective-Cの本を何冊か買ったのが1年前。当然、全く分かることもなくすぐさま放置でした。それからiPhoneアプリ開発の情熱は消えつつあったのですが、今年の2月に&lt;a href=&#34;https://twitter.com/#!/astronaughts&#34;&gt;@astronaughts&lt;/a&gt;に「&lt;a href=&#34;http://astronaughts.net/?p=204&#34;&gt;JavaScriptでiPhoneアプリ開発できるTitaniumえーわーめっちゃえーわー！&lt;/a&gt;」と言われて、本腰を入れて勉強したらすぐさまカメラなど起動させることができて楽しかったっす。ほんとスピーディーに、それこそグリモンのユーザースクリプトを作ってるような感覚でiPhoneアプリを制作できたことはまさに感動です。&lt;/p&gt;

&lt;p&gt;手間取るのは、アプリの認証とか開発者登録だけでコード書く分にはJavaScriptある程度分かってたらホント楽しいよ！これで僕も肩書きだけはiPhoneアプリデベロッパーだ！（あ、ごめんなさい。もの投げないで(/ω＼)ｲﾔﾝ）&lt;/p&gt;

&lt;p&gt;ってことで、Webでべろっぱーのみんなもれっつたいたん！
&lt;h3&gt;参考リソース&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/t32k/Nyars&#34;&gt;アプリのソースコード（GitHub）&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://t32k.me/mol/log/untitled/&#34;&gt;開発に当たってハマった記事まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe frameborder=&#34;0&#34; height=&#34;264&#34; src=&#34;http://player.vimeo.com/video/23317105?title=0&amp;amp;byline=0&amp;amp;portrait=0&#34; width=&#34;470&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/jp/app/nyars/id433610083?mt=8&#34;&gt;&lt;img title=&#34;App Store&#34; src=&#34;/static/blog/2011/05/badge_appstore-lrg.gif&#34; alt=&#34;&#34; width=&#34;116&#34; height=&#34;40&#34; /&gt;&lt;/a&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://itunes.apple.com/jp/app/nyars/id433610083?mt=8&#34;&gt;Nyars（無料）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;リリース情報&lt;/h3&gt;
&lt;h4&gt;Ver 1.2.1（6/10/2011）&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;キャンセル時の誤作動修正&lt;/li&gt;
    &lt;li&gt;文言修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ver 1.2（5/10/2011）&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;アスペクト比の修正（画像が縦長になる件）&lt;/li&gt;
    &lt;li&gt;新色（茶トラ）の追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ver 1.1（5/6/2011）&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;iPhone4撮影時の上部黒い隙間の削除&lt;/li&gt;
    &lt;li&gt;カメラコントロール系のボタンを使用可能&lt;/li&gt;
    &lt;li&gt;Retina対応&lt;/li&gt;
    &lt;li&gt;多言語化対応（日本語、英語）&lt;/li&gt;
    &lt;li&gt;アイコンの微調整&lt;/li&gt;
    &lt;li&gt;アプリ容量の削減（7.8MB→4.1MB）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ver 1.0（4/30/2011）&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;アプリ公開&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>querySelector と querySelectorAll というか Live NodeList と Static NodeList</title>
      <link>http://localhost:1313/mol/log/live-or-static/</link>
      <pubDate>Sun, 02 Jan 2011 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/live-or-static/</guid>
      <description>&lt;p&gt;先日、getElementsByClassName便利だぜ！とブログに書いたら、to-Rの西畑せんせより「&lt;a href=&#34;http://t32k.me/mol/2010/12/getelementsbyname-and-getelementsbyclassname/comment-page-1/#comment-1116&#34;&gt;querySelectorAllアルヨ！&lt;/a&gt;」と言われたので、調べてみる。&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;querySelector と querySelectorAll&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/amachang/20080306/1204787459&#34;&gt;IE8 で実装された Selectors API とは何か？ - IT戦記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
まぁ上記エントリにほぼ全てが書かれているので、特に今さら書くことはないのですが、自分メモのために。&lt;/p&gt;

&lt;p&gt;なにはともあれ、サポート状況をば。
&lt;blockquote&gt;&lt;a href=&#34;/static/blog/2011/01/qsa.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-2292&#34; title=&#34;qsa&#34; src=&#34;/static/blog/2011/01/qsa-300x62.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.quirksmode.org/dom/w3c_core.html&#34;&gt;W3C DOM Compatibility – Core&lt;/a&gt;&lt;/blockquote&gt;
ほーFx3.0は対応していないけど、IE8は対応してるのか。素敵！
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;em&gt;element&lt;/em&gt; = document.querySelector(&lt;strong&gt;&lt;em&gt;selectors&lt;/em&gt;&lt;/strong&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;em&gt;element&lt;/em&gt; is an element object.&lt;a href=&#34;https://developer.mozilla.org/En/DOM/Document.querySelector&#34;&gt;
document.querySelector - MDC Doc Center&lt;/a&gt;&lt;/blockquote&gt;
querySelector ってのもある。基本的な使い方は両方一緒で&lt;em&gt;selectors&lt;/em&gt;の引数に、取得したい要素のCSSセレクタ書いてあげればいい。querySelector は最初に見つけてきた単一の要素を返すのに対して、
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;em&gt;elementList&lt;/em&gt; = document.querySelectorAll(&lt;strong&gt;&lt;em&gt;selectors&lt;/em&gt;&lt;/strong&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;em&gt;elementList&lt;/em&gt; is a non-live NodeList of element objects.
&lt;a href=&#34;https://developer.mozilla.org/en/DOM/document.querySelectorAll&#34;&gt;document.querySelectorAll - MDC Doc Center&lt;/a&gt;&lt;/blockquote&gt;
querySelectorAll はノードリストを返す。
&lt;pre&gt;&lt;code&gt;var node = document.querySelectorAll(&amp;lsquo;#hoge &amp;gt; h2&amp;rsquo;);&lt;/code&gt;&lt;/pre&gt;
つまり、#hogeの中の子供のh2だけを取ってくるなんてことも、上記のようにCSSセレクタで簡単に書けちゃう。jQueryライクに書けちゃう。だから、これまでFirefoxのグリモンとかChromeの拡張機能を作成するときは僕はjQuery読み込んでいたんだけど、簡単なものであればSelectors API使えば、jQueryに頼らなくても良くなった（いや、欲しいけど）。
&lt;h3&gt;Live NodeList と Static NodeList&lt;/h3&gt;
はい、そんなわけでSelectors API＼(-o-)／なんですけども、ひとつ気になる点がありました。querySelectorAllが返すのはnon-liveなノードリストと書いてあります。non-liveって何よ？ってことで、仕様書、仕様書
&lt;blockquote&gt;querySelectorAll() メソッドから返される NodeList オブジェクトは 動的 (live) ではなく、静的 (static) である必要があります ([DOM-LEVEL-3-CORE], section 1.1.1) (must)。元文書の構造が変化しても、その変化が NodeList オブジェクトに反映されることは許されていません (must not)。つまり、返されるオブジェクトは、リストが生成された時点で文書に存在していたノードに対しクエリをかけ、マッチする Element ノードを取得することを意味します。&lt;a href=&#34;http://standards.mitsue.co.jp/resources/w3c/TR/selectors-api/&#34;&gt;
セレクター API Level 1&lt;/a&gt;&lt;/blockquote&gt;
ほほー、静的なノードリストなわけですね。具体的な例ですと、
&lt;pre&gt;&lt;code&gt;var divs = document.getElementsByTagName(&amp;ldquo;div&amp;rdquo;),
    i=0;
while(i &amp;lt; divs.length){
 document.body.appendChild(document.createElement(&amp;ldquo;div&amp;rdquo;));
 i++;
}&lt;/code&gt;&lt;/pre&gt;
getElementsByTagName()で返される値は動的なノードリストですので、上記のスクリプトは無限ループになる。
&lt;pre&gt;&lt;code&gt;var divs = document.querySelectorAll(&amp;ldquo;div&amp;rdquo;),
    i=0;
while(i &amp;lt; divs.length){
 document.body.appendChild(document.createElement(&amp;ldquo;div&amp;rdquo;));
 i++;
}&lt;/code&gt;&lt;/pre&gt;
代わって、querySelectorAllで返される値は静的なノードリストで、取得してきた時点での数になります。つまり、divが10個そのときあったのであれば、その後に何個divを生成しようが10回でこのループは止まります。&lt;/p&gt;

&lt;p&gt;違いが分かりましたけど、なんでちゃうのん？
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://web.g.hatena.ne.jp/vantguarde/20081114/1226673398&#34;&gt;querySelectorAllがliveじゃないNodeList返すのはなんで？ - vantguarde - web:g&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
コメント欄にuupaaせんせがDOMアクセスを減らすためと書いてある。&lt;/p&gt;

&lt;p&gt;おーなるほど、パフォーマンスのためか？と思ったのでもうちっと調べてみると、こんな記事があった。
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.nczonline.net/blog/2010/09/28/why-is-getelementsbytagname-faster-that-queryselectorall/&#34;&gt;Why is getElementsByTagName() faster that querySelectorAll()? | NCZOnline&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://journal.mycom.co.jp/articles/2010/10/01/javascript-nodelist-difference/index.html&#34;&gt;【レポート】getElementsByTagName()がquerySelectorAll()より高速な理由  | マイコミジャーナル&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/vwxyz/20101005&#34;&gt;Nicholas C. Zakas「getElementsByTagName()がquerySelectorAll()よりも高速な件」 - クライアント・サイド・スクリプティング with Web Standards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
上記ブログに書いてあることをなんとなく理解すると、静的リストはまるまるコピーするから事前にやることが多いので、動的リストよりも遅くなる。けども、取ってきたノードリストをイテレートする分には動的リストは毎回チェックするのに対して、静的リストはしないから速い。とのことみたいな事言ってるんだけど、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jsperf.com/&#34;&gt;jsPerf&lt;/a&gt; ってところでパフォーマンスしてみたのがこれ。ついでに、ほかのgetElementsBy*メソッドもテストしてみた。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;getElementsByTagName VS querySelectorAll · jsPerf&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://jsperf.com/getelementsbytagname-vs-queryselectorall&#34;&gt;http://jsperf.com/getelementsbytagname-vs-queryselectorall&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://jsperf.com/getelementsbytagname-vs-queryselectorall/2&#34;&gt;http://jsperf.com/getelementsbytagname-vs-queryselectorall/2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;getElementsByName VS querySelectorAll · jsPerf&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://jsperf.com/getelementsbyname-vs-queryselectorall&#34;&gt;http://jsperf.com/getelementsbyname-vs-queryselectorall&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://jsperf.com/getelementsbyname-vs-queryselectorall/2&#34;&gt;http://jsperf.com/getelementsbyname-vs-queryselectorall/2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;getElementsByClassName VS querySelectorAll · jsPerf&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://jsperf.com/getelementsbyclassname-vs-queryselectorall&#34;&gt;http://jsperf.com/getelementsbyclassname-vs-queryselectorall&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://jsperf.com/getelementsbyclassname-vs-queryselectorall/2&#34;&gt;http://jsperf.com/getelementsbyclassname-vs-queryselectorall/2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
なんか全部のテストで、（operaを除いて）getElementsBy*（動的）が速いんですけど。。。でも、&lt;a href=&#34;http://jsperf.com/getelementsbytagname-a-0-vs-queryselector-a/4&#34;&gt;このテスト&lt;/a&gt;だとQSAの方が速い。。。うんーわからん。だれかおせーてエロい人！&lt;/p&gt;

&lt;p&gt;結局、getElementsBy*で取れるもんはわざわざ、QSAでやらないほうがいいよ。ってことかな。あ、だからってQSAをディスってないよ。クラスの複数付けとか取ってくるときはQSAでやったほうが楽チンだし速いからね。と思ったけど、&lt;a href=&#34;http://jsperf.com/the-benefit-of-using-the-selectors-api&#34;&gt;このテスト&lt;/a&gt;だとgetElementsByTagNameの方が速いじゃん（High Perfromace JavaScriptにはQSAのほうが2-6倍速いって書いてあるのに&amp;hellip;）&lt;/p&gt;

&lt;p&gt;とりあえず、よく分かりません＞＜。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>getElementsByName と getElementsByClassName</title>
      <link>http://localhost:1313/mol/log/getelementsbyname-and-getelementsbyclassname/</link>
      <pubDate>Mon, 27 Dec 2010 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/getelementsbyname-and-getelementsbyclassname/</guid>
      <description>&lt;p&gt;ちょっと気になったのでメモメモ。&lt;/p&gt;

&lt;p&gt;普段、jQueryなど使っているときは特に気にしなくてもいいのですが、フレームワークなしでなんかしらの要素取ってくるのって結構大変というか、document.getElementById しか頭に思いつかないのです。&lt;/p&gt;

&lt;p&gt;最近というか先々々月ぐらいのことですが、document.getElementsByName なるものを知りました。このメソッドはどんなものかと言いますと、&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;document.getElementsByName は、name 属性に与えられた値を持つ全ての要素の NodeList を返します。
&lt;a href=&#34;https://developer.mozilla.org/ja/DOM/document.getElementsByName&#34;&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;document.getElementsByName - MDC Doc Center&lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;
ほうほう、なるほど。でも、これと似たような名前のメソッドなかったけ？
&lt;blockquote&gt;document.getElementsByClassNameは、与えられたクラス名で得られる要素の集合を返します。
&lt;a href=&#34;https://developer.mozilla.org/ja/DOM/document.getElementsByClassName&#34;&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;document.getElementsByClassName - MDC Doc Center&lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;
おう、これこれ。でも getElementsByClassName のほうはＩＥ対応してないっぽいし、どんな要素にでもname属性つけれたら、getElementsByName で十分じゃね？という疑問が湧いてきたのですが、そうでもないみたいです。&lt;/p&gt;

&lt;p&gt;HTML4.01でname属性が設定できるのは以下の要素だけ。
&lt;blockquote&gt;
&lt;ul style=&#34;-moz-column-count: 3; -webkit-column-count: 3;&#34;&gt;
    &lt;li&gt;a&lt;/li&gt;
    &lt;li&gt;applet&lt;/li&gt;
    &lt;li&gt;button&lt;/li&gt;
    &lt;li&gt;form&lt;/li&gt;
    &lt;li&gt;frame&lt;/li&gt;
    &lt;li&gt;iframe&lt;/li&gt;
    &lt;li&gt;img&lt;/li&gt;
    &lt;li&gt;input&lt;/li&gt;
    &lt;li&gt;map&lt;/li&gt;
    &lt;li&gt;meta&lt;/li&gt;
    &lt;li&gt;object&lt;/li&gt;
    &lt;li&gt;param&lt;/li&gt;
    &lt;li&gt;select&lt;/li&gt;
    &lt;li&gt;textarea&lt;/li&gt;
&lt;/ul&gt;
&lt;a href=&#34;http://www.mitsue.co.jp/glossary/html/attribute/name.html&#34;&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;name属性 | HTML用語集 | ミツエーリンクス&lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;
ぷらす&amp;hellip;
&lt;blockquote&gt;IE、Netscape系共通で使えるのは、JavaScriptの基礎部分でname指定取りができるHTMLタグに限られます。 IMG、FORM、FORM部品、などです。ま、時代的にname属性はフォーム以外ではあり得ない時代でもありますので、使えなくても差し支えないでしょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.artemis.ac/contents/javascript/javascript11.htm#names&#34;&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;初心者のJavaScript HTMLエレメントのオブジェクト指定方法 各種 [ ARTEMIS ] &lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;
つまり、&amp;lt;div name=&amp;ldquo;hoge&amp;rdquo;&amp;gt;の要素をgetElementsByNameで取りたいと思っても必ずしも全てのブラウザで正常に動作することもないし、そもそも文法的にやっちゃだめてことで。。。&lt;/p&gt;

&lt;p&gt;そうなってくると、どんな要素にでもclass属性がつけれるので、getElementsByClassName がやっぱり重要というか、こっちを使っていくほうがベターなんだと理解しました。&lt;/p&gt;

&lt;p&gt;ちなみに、getElementsByClassNameの各ブラウザのサポート状況はこんな感じ。IE以外OKってな感じで。
&lt;blockquote&gt;&lt;a href=&#34;/static/blog/2010/12/gebcn.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-2240&#34; title=&#34;gebcn&#34; src=&#34;/static/blog/2010/12/gebcn-300x50.png&#34; alt=&#34;&#34; width=&#34;550&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.quirksmode.org/dom/w3c_core.html&#34;&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;W3C DOM Compatibility - Core&lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;
ちなみに、似たような名前のメソッドでgetElementsByTagNameてのもある。
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/DOM/document.getElementsByTagName&#34;&gt;document.getElementsByTagName - MDC Doc Center&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
結論：jQueryないと僕生きていけません :(&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript部 @カフェどんぐりの木</title>
      <link>http://localhost:1313/mol/log/sunday-javascript/</link>
      <pubDate>Sun, 13 Sep 2009 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/sunday-javascript/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.flickr.com/photos/t32k/3915597978/&#34; title=&#34;RIMG0013 by t32k, on Flickr&#34;&gt;&lt;img src=&#34;http://farm3.static.flickr.com/2462/3915597978_5a0bcdc3f2.jpg&#34; alt=&#34;RIMG0013&#34; height=&#34;375&#34; width=&#34;500&#34; /&gt;&lt;/a&gt;&lt;br /&gt;社内でJavaScript部（&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4873113296?ie=UTF8&amp;amp;tag=blog0360-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4873113296&#34;&gt;サイ本&lt;/a&gt;の読書会）を開いているのですが、たまにはちょっとお外に出てプログラミングするのも良いのではないかと思い立ったら吉日DAYってことで、してきた。&lt;br /&gt;&lt;br /&gt;場所は『&lt;a href=&#34;http://ameblo.jp/cafedon/&#34;&gt;カフェどんぐりの木&lt;/a&gt;』さん。&lt;a href=&#34;http://warikiru.blogspot.com/2009/09/flex-user-group-no79-in-hokuriku.html&#34;&gt;昨日のFxUGの勉強会&lt;/a&gt;があったITビジネスプラザ武蔵のちょうど裏側にあります。AM 9:00 - PM 6:00まで２階のお座敷の部屋を借りて、なおかつ、ランチとコーヒー付きで1人1000円と格安な料金（普通にランチとコーヒー頼んだら1000円超えるので場所代は実質タダ!?）だったので、丸一日JavaScriptしてきました。&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://www.flickr.com/photos/t32k/3914814259/&#34; title=&#34;RIMG0017 by t32k, on Flickr&#34;&gt;&lt;img src=&#34;http://farm3.static.flickr.com/2581/3914814259_b1b9729ba8.jpg&#34; alt=&#34;RIMG0017&#34; height=&#34;375&#34; width=&#34;500&#34; /&gt;&lt;/a&gt;&lt;br /&gt;4名でちょど良い広さのお座敷でした！&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://www.flickr.com/photos/t32k/3915599266/&#34; title=&#34;RIMG0020 by t32k, on Flickr&#34;&gt;&lt;img src=&#34;http://farm4.static.flickr.com/3513/3915599266_83e41ec6c5.jpg&#34; alt=&#34;RIMG0020&#34; height=&#34;375&#34; width=&#34;500&#34; /&gt;&lt;/a&gt;&lt;br /&gt;くつろぐ先輩ｗ&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://www.flickr.com/photos/t32k/3915599410/&#34; title=&#34;RIMG0021 by t32k, on Flickr&#34;&gt;&lt;img src=&#34;http://farm3.static.flickr.com/2421/3915599410_9926eae7ef.jpg&#34; alt=&#34;RIMG0021&#34; height=&#34;375&#34; width=&#34;500&#34; /&gt;&lt;/a&gt;&lt;br /&gt;お昼のお弁当！えびふりゃー！&lt;br /&gt;&lt;h5&gt;感想&lt;/h5&gt;ネット環境がないため、事前に資料などダウンロードして来ないと厳しい。当日、僕はGreasemonkeyについて調べようと思い資料をダウンロードしてきたけど、やっぱりちょっとした疑問とかすぐにググれないのは困った。後半は、ダウロードしてきた資料とかも読み切ってしまって、&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4839922373?ie=UTF8&amp;amp;tag=warikiru-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4839922373&#34;&gt;DOM本&lt;/a&gt;のチュートリアルをだらだらしていた。ネットがない環境でどう勉強するのか事前の計画が重要だと思った。今後、カフェどんぐりの木さんにネット環境ができることを期待しようｗ&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h5&gt;おまけ&lt;/h5&gt;終わったらPM6:00だったので、そのまま皆で夕食へ！&lt;br /&gt;せせらぎ通りの&lt;a href=&#34;http://www.b-olive.net/&#34;&gt;ビストロ Olive&lt;/a&gt; さんでディナー頂きました。リーズナブルながらどれもおいしいモノばかりで大満足でした。&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://www.flickr.com/photos/t32k/3914816813/&#34; title=&#34;RIMG0030 by t32k, on Flickr&#34;&gt;&lt;img src=&#34;http://farm3.static.flickr.com/2641/3914816813_8fffb393f4.jpg&#34; alt=&#34;RIMG0030&#34; height=&#34;375&#34; width=&#34;500&#34; /&gt;&lt;/a&gt;&lt;br /&gt;メインのおにくぅー！&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://www.flickr.com/photos/t32k/3914817467/&#34; title=&#34;RIMG0033 by t32k, on Flickr&#34;&gt;&lt;img src=&#34;http://farm3.static.flickr.com/2550/3914817467_389712a7ae.jpg&#34; alt=&#34;RIMG0033&#34; height=&#34;375&#34; width=&#34;500&#34; /&gt;&lt;/a&gt;&lt;br /&gt;疲れた頭には糖分が必須！チョコレートのミルクレープが繊細でした。&lt;br /&gt;&lt;br /&gt;グルメ的には大満足でしたが、お勉強的にちょっと精進が足りなかったので次回はリベンジしたいと思います！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Future of JavaScript</title>
      <link>http://localhost:1313/mol/log/the-future-of-javascript/</link>
      <pubDate>Sat, 03 Nov 2007 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/the-future-of-javascript/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.mozilla-japan.org/events/2007/javascript/&#34;&gt;The Future of JavaScript&lt;/a&gt; 行きたいなー、でも仕事だしなーなんて悩んでたら&lt;br /&gt;すぐに受付終了になっちゃいました、&lt;br /&gt;でも、&lt;a href=&#34;http://ustream.tv/channel/the-future-of-javascript&#34;&gt;ここ&lt;/a&gt;で見られると聞いたので、見てたんですけど、&lt;br /&gt;&lt;br /&gt;さっぱりです＞＜&lt;br /&gt;&lt;br /&gt;唯一理解したのは、&lt;br /&gt;&lt;br /&gt;John Resigさんは長髪でFireFoxのTシャツを着てたのが羨ましかった。俺も欲しい。&lt;br /&gt;&lt;br /&gt;以上。。。&lt;br /&gt;&lt;br /&gt;でも、piroさんとamachangさんのプレゼンは何となく理解できる範囲だったので安心した。&lt;br /&gt;&lt;br /&gt;要はXPathできたらモテるぜ！&lt;br /&gt;&lt;br /&gt;ということですね。 まぁ冗談はおいといて、&lt;br /&gt;&lt;br /&gt;ノードを特定したいとき、３つの方法がある、&lt;br /&gt;&lt;br /&gt;１つはDOM core&lt;br /&gt;document.getElementByIdとか使ってノードを得る方法ですね。&lt;br /&gt;まー、デザイナーの自分にとってはよく分からんですわ、これ。ややこいし。&lt;br /&gt;&lt;br /&gt;２つめはCSSセレクタ&lt;br /&gt;jQueryなどのライブラリをつかって、$(&amp;ldquo;div p&amp;rdquo;)といった感じで得る方法。&lt;br /&gt;これだとdiv要素の子孫であるp要素のノードを簡単得ることができる。&lt;br /&gt;CSSを使うデザイナーさんでも比較的理解しやすい。&lt;br /&gt;しかし、これだとライブラリに依存しなければならないし、&lt;br /&gt;もっと込み入ってくると無駄なidなど振って対応させなければならない。&lt;br /&gt;&lt;br /&gt;そこで3つめ、XPathは&lt;br /&gt;ちょっと書き方が難しいけどもノードを厳密に特定することができる。&lt;br /&gt;ので、余計なidやclassを追加する必要もないのでHTMLを綺麗に保てる。&lt;br /&gt;らしいです。&lt;br /&gt;&lt;br /&gt;とりあえず、ノードが住所としたら、&lt;br /&gt;XPathは「石川県金沢市JS町5丁目1番地」といった感じでスパッと表現するのに対して、&lt;br /&gt;CSSセレクタは「21世紀美術館あるとこの向かいのデパートの右らへん」といった感じかな。&lt;br /&gt;&lt;br /&gt;またお勉強しなければならないね、これは。。。&lt;br /&gt;&lt;br /&gt;あと、amachngさんおプレゼンツールはオサレでした。&lt;br /&gt;あれは&lt;a href=&#34;http://amachang.art-code.org/pr/&#34;&gt;S6&lt;/a&gt;かなー?上キー押したら一覧表みたいになるのね、オサレー☆&lt;br /&gt;ぼくも使ってみようと♪&lt;br /&gt;&lt;br /&gt;&lt;table border=&#34;0&#34; cellpadding=&#34;5&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&#34;top&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4088718429/warikiru-22/ref=nosim/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/2155209GFML.jpg&#34; alt=&#34;スラムダンク (22)&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td valign=&#34;top&#34;&gt;&lt;span style=&#34;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4088718429/warikiru-22/ref=nosim/&#34; target=&#34;_blank&#34;&gt;スラムダンク (22)&lt;/a&gt;&lt;br /&gt;井上 雄彦&lt;br /&gt;&lt;br /&gt;集英社  1994-12&lt;br /&gt;売り上げランキング :&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4088718429/warikiru-22/ref=nosim/&#34; target=&#34;_blank&#34;&gt;Amazonで詳しく見る&lt;/a&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt; by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;先生、おれFireFoxのTシャツを着ればJSできると思ってたのかなぁ・・・&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>