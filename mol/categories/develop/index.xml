<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Develop on MOL</title>
    <link>http://localhost:1313/mol/categories/develop/</link>
    <description>Recent content in Develop on MOL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <lastBuildDate>Wed, 24 Dec 2014 00:00:00 UTC</lastBuildDate>
    <atom:link href="http://localhost:1313/mol/categories/develop/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Smashing Magazineのパフォーマンス改善ケースが凄まじい件</title>
      <link>http://localhost:1313/mol/log/style-class-conference/</link>
      <pubDate>Wed, 24 Dec 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/style-class-conference/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/frontrend&#34;&gt;Frontrend Advent Calendar 2014 - Qiita&lt;/a&gt;の24日目。たぶん。知らんけど。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/mol/images/2014/12-24-fig01.jpg&#34; alt=&#34;The Style &amp;amp; Class Conference 2014&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;ちょっと前になるが12/13にバンクーバーで開催された&lt;a href=&#34;http://www.eventbrite.com/e/the-style-class-conference-tickets-13842235499&#34;&gt;The Style &amp;amp; Class Conference 2014&lt;/a&gt;に参加してきた。前日に&lt;a href=&#34;http://smashingconf.com/&#34;&gt;Smashing Conference&lt;/a&gt;が、ウィスラーというバンクーバーから比較的近い所で開催されていて、本当はそっちに行きたかったんだけど高額なため、地元コミュニティのほうにだけ参加した。ウィスラーの方の記事は&lt;a href=&#34;http://www.ygoto3.com/?p=107&#34;&gt;@ygoto3が書いてたっぽい。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Smashing Conferenceで登壇していた&lt;a href=&#34;https://twitter.com/johnallsopp&#34;&gt;John Allsopp&lt;/a&gt;氏や&lt;a href=&#34;https://twitter.com/vlh&#34;&gt;Val Head&lt;/a&gt;氏もこのカンファレンスで登壇するということで、『なんだ、ウィスラーのついでかよー』と思い全然期待してなかったのだが、行ってみたらカンファレンス全体の構成などすごく考えられていて、とても素晴らしいカンファレンスだった。&lt;/p&gt;

&lt;p&gt;そんなわけで、今回はその中で最も気に入った&lt;a href=&#34;https://twitter.com/smashingmag&#34;&gt;Vitaly Friedman&lt;/a&gt;氏のセッションを紹介したいと思う。&lt;/p&gt;

&lt;h2 id=&#34;improving-smashing-magazine-s-performance:6a3d5e7bca1f2497d73d6b9fafc5cac0&#34;&gt;Improving Smashing Magazine&amp;rsquo;s Performance&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;/mol/images/2014/12-24-fig02.jpg&#34; alt=&#34;Vitaly Friedman&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.smashingmagazine.com/2014/09/08/improving-smashing-magazine-performance-case-study/&#34;&gt;Improving Smashing Magazine&amp;rsquo;s Performance: A Case Study&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;講演内容と同じ内容と思われる記事がすでに9月に上がっているみたい。バックエンドからフロントエンドまでいろいろなことやってみるみたいで、めちゃめちゃ長文なので時間あるときにでも読んでおくとよい。その中でも僕が気に入ったのがCritical CSSの対応をしていたことだ。&lt;/p&gt;

&lt;h3 id=&#34;critical-rendering-path:6a3d5e7bca1f2497d73d6b9fafc5cac0&#34;&gt;Critical Rendering Path&lt;/h3&gt;

&lt;p&gt;Critical Rendering Pathとは、HTML/CSS/JSなどのバイトの取得からピクセルとしてレンダリングする必須処理までの間の段階のことを言い、Critical CSSとはページの最初のレンダリングをブロックする可能性のあるCSSのことを言う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1IRHyU7_crIiCjl0Gvue0WY3eY_eYvFQvSfwQouW9368/present?slide=id.p19&#34;&gt;&lt;img src=&#34;http://t32k.me/static/blog/2013/07/31.png&#34; alt=&#34;Critical Rendering Path&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なぜCSSがレンダリングをブロックするのかというと、上図の通り、レンダリングを完成するにあたってブラウザはDOMとCSSOM(CSSオブジェクトモデル)が必要なわけでして、スタイルシートがダウンロードされない限りレンダリングが開始されないわけだ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML マークアップを処理して DOM ツリーを作成&lt;/li&gt;
&lt;li&gt;CSS マークアップを処理して CSSOM ツリーを作成&lt;/li&gt;
&lt;li&gt;DOM と CSSOM を組み合わせてレンダーツリーを作成&lt;/li&gt;
&lt;li&gt;レンダーツリーでレイアウトを実行して各ノードの形状を計算&lt;/li&gt;

&lt;li&gt;&lt;p&gt;各ノードを画面にペインティング&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=ja&#34;&gt;Render-tree construction, Layout, and Paint — Web Fundamentals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;少なくともブラウザに何かが描画されるまでには上記のような流れをふまないといけない。&lt;/p&gt;

&lt;p&gt;そうゆうわけで、是が非でも速く描画するために、Critical Rendering Pathの最適化をしようとすると以下のことに気をつけなければならない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クリティカル リソース数の最小化&lt;/li&gt;
&lt;li&gt;クリティカル バイト数の最小化&lt;/li&gt;
&lt;li&gt;クリティカル パス長の最小化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ことCSSだけに関して言えば、リソース数の最小化はスタイルシートを何個も読み込まず、1個にまとめればよいし、バイト数の最小化は&lt;a href=&#34;https://github.com/t32k/grunt-csso&#34;&gt;CSSO&lt;/a&gt;や&lt;a href=&#34;https://github.com/t32k/speed/blob/master/articles/gzip.md&#34;&gt;gzip&lt;/a&gt;をかけてやればよい。&lt;/p&gt;

&lt;p&gt;まぁそれらはそんなに難しいことではないので、すぐにでも対応できると思われる。問題なのはクリティカル パス長（音的にリヴァイ兵長みたいな感じなので以後Critical Path Lengthと表記する）の最適化だ。&lt;/p&gt;

&lt;p&gt;基本的には外部スタイルシートとして読み込むファイルを1個にまとめれば、HTML読み込んで、そのCSSを読み込むのがCritical Path Lengthの最短じゃねーのかと思うが、それではGoogle様が認めてくれない。&lt;/p&gt;

&lt;p&gt;試しに、&lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights/?hl=ja&#34;&gt;PageSpeed Insights&lt;/a&gt;で僕のプロフィール（単純な静的ページで外部CSSファイル1個）ページ：&lt;a href=&#34;http://t32k.me/&#34;&gt;t32k.me&lt;/a&gt;を計測してみると、『&lt;strong&gt;スクロールせずに見えるコンテンツのレンダリングをブロックしている JavaScript/CSS を排除する&lt;/strong&gt;』なことを言われモバイル評価で89点といった結果が返ってきた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/mol/images/2014/12-24-fig03.png&#34; alt=&#34;PageSpeed Insights：Before&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;で、対処法として&lt;a href=&#34;https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery&#34;&gt;CSSの配信を最適化&lt;/a&gt;しなさいと言われる。こっちの説明より&lt;a href=&#34;https://developers.google.com/web/fundamentals/&#34;&gt;Web Fundamentals&lt;/a&gt;の説明のほうが分かりやすいのでこっちを引用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;インライン レンダリング ブロック CSS&lt;/strong&gt;&lt;br /&gt;
クリティカル CSS は、HTML ドキュメント内で直接インライン化することをおすすめします。これにより、クリティカル パスの追加ラウンドトリップが削減され、適切に設定できれば、HTML が唯一のブロック リソースの場合に「1 ラウンドトリップ」のクリティカル パス長が実現できます。&lt;br /&gt;
― &lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/page-speed-rules-and-recommendations&#34;&gt;PageSpeed Rules and Recommendations&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり、外部スタイルシートを読み込んでいては1.) HTMLを読み込む、2.) 外部CSSファイルを読み込むので、最低でも2ラウンドトリップ（往復）しないといけない。ゆえに描画が遅くなるのでHTML内にインラインで記述しなよっと仰せられておる。&lt;/p&gt;

&lt;p&gt;でも、だからといって全部CSSをインライン化しちゃうとHTMLが膨れ上がっちゃう。TCPスロースタートのせいで1回目のレスポンスで送信できるサイズは14KBなので、オーバーしちゃう。この辺りは以前に&lt;strong&gt;HTTPリクエストを減らすためにシリーズ&lt;/strong&gt;で記事を書いたので参照してほしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://t32k.me/mol/log/reduce-http-requests-overview/&#34;&gt;【序章】HTTPリクエストは甘え — MOL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://t32k.me/mol/log/reduce-http-requests-one-second/&#34;&gt;【終章】我々には1000msの猶予しか残されていない — MOL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;azlink-box&#34; style=&#34;margin-bottom:0px&#34;&gt;&lt;div class=&#34;azlink-image&#34; style=&#34;float:left&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873116767/warikiru-22/ref=nosim/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51x2sA8N%2BTL._SL160_.jpg&#34; alt=&#34;ハイパフォーマンス ブラウザネットワーキング―ネットワークアプリケーションのためのパフォーマンス最適化&#34; style=&#34;border:none&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;azlink-info&#34; style=&#34;float:left;margin-left:15px;line-height:120%&#34;&gt;&lt;div class=&#34;azlink-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873116767/warikiru-22/ref=nosim/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;ハイパフォーマンス ブラウザネットワーキング&lt;/a&gt;&lt;div class=&#34;azlink-powered-date&#34; style=&#34;font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%&#34;&gt;posted at 2014.12.24&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-detail&#34;&gt;Ilya Grigorik,和田 祐一郎,株式会社プログラミングシステム社&lt;br /&gt;オライリージャパン&lt;br /&gt;売り上げランキング: 130931&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;azlink-link&#34; style=&#34;margin-top:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873116767/warikiru-22/ref=nosim/&#34; target=&#34;_blank&#34;&gt;Amazon.co.jp で詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-footer&#34; style=&#34;clear:left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;または、&lt;a href=&#34;https://www.igvita.com/&#34;&gt;Ilya Grigorik&lt;/a&gt;大先生の本を読んでおいた方がいい。&lt;/p&gt;

&lt;p&gt;だもんで、必要なCSSだけインライン化しましょうよってことになる。それ（&lt;a href=&#34;http://www.suzukikenichi.com/blog/above-the-fold%E3%81%A8%E3%81%AF/&#34;&gt;Above the Fold&lt;/a&gt;）に必要なCSS、つまりCritical CSSを検出するのがnpmモジュールの&lt;a href=&#34;https://github.com/filamentgroup/criticalcss&#34;&gt;CriticalCSS&lt;/a&gt;だ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.filamentgroup.com/lab/performance-rwd.html&#34;&gt;&lt;img src=&#34;/mol/images/2014/12-24-fig05.jpg&#34; alt=&#34;ATFの例&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;簡単に説明すれば上図のようにファーストビュー（Above the Fold）だけに使うCSSを抽出してくれる。&lt;/p&gt;

&lt;p&gt;ちなみにGruntプラグインで利用できるので、これを使って僕のプロフィールページ：t32k.meを改善してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/filamentgroup/grunt-criticalcss&#34;&gt;filamentgroup/grunt-criticalcss&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;grunt.initConfig({
  criticalcss: {
    custom_options: {
      options: {
        url: &amp;quot;http://localhost:8000&amp;quot;,
        width: 1024,
        height: 768,
        outputfile: &amp;quot;_templates/includes/critical.css&amp;quot;,
        filename: &amp;quot;skeleton.min.css&amp;quot;
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じでGruntfileの方は記述する。重要なのはwidht/heightで、ここで自分の好きなAbove the Foldを定義する。で出力したCSSをテンプレート側で読み込む。&lt;/p&gt;

&lt;p&gt;今回は、1.) CriticalCSSでクリティカルCSSを生成、2.) CSSOでミニファイ、3.) Jadeでコンパイル読み込むという流れ。詳しくはGitHubにあげてあるので参照してね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/t32k/t32k.github.io/blob/master/Gruntfile.js&#34;&gt;t32k.github.io/Gruntfile.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で、Full CSSの方は、後から非同期で読み込む。こうしないとレンダリングをブロックするので。あ、ちなみにほぼ&lt;a href=&#34;http://getskeleton.com/&#34;&gt;Skeleton.css&lt;/a&gt;をそのまま使ってる(^_^;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;
/*!
  loadCSS: load a CSS file asynchronously.
  [c]2014 @scottjehl, Filament Group, Inc.
  Licensed MIT
*/
function loadCSS(href, before, media) {
  var ss = window.document.createElement(&#39;link&#39;);
  var ref = before || window.document.getElementsByTagName(&#39;script&#39;)[0];
  var sheets = window.document.styleSheets;
  ss.rel = &#39;stylesheet&#39;;
  ss.href = href;
  ss.media = &#39;only x&#39;;
  ref.parentNode.insertBefore(ss, ref);
  return ss;
}
loadCSS(&#39;/skeleton.min.css&#39;);
&amp;lt;/script&amp;gt;
&amp;lt;noscript&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/skeleton.min.css&amp;quot;&amp;gt;
&amp;lt;/noscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、Critical CSSに対応した結果をPageSpeedにかけてみると、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/mol/images/2014/12-24-fig04.png&#34; alt=&#34;PageSpeed Insights：After&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;めでたく、先ほどの指摘はクリアできました。わーい、97点٩(๑❛ᴗ❛๑)۶&lt;/p&gt;

&lt;p&gt;ちなみに『ブラウザのキャッシュを活用する』はGitHub Pagesなので僕からHTTP Headerを変更できないのでほっとく。&lt;/p&gt;

&lt;h2 id=&#34;speed-index-1000:6a3d5e7bca1f2497d73d6b9fafc5cac0&#34;&gt;Speed Index &amp;lt;= 1000&lt;/h2&gt;

&lt;p&gt;なにをもって速いとするのか？というのは重要な問題だ。PageSpeed Insightのスコアも一種の指標となるだろうが、もう少し細かく検証したい。（事実、PageSpeedのスコアは90点くらいまでなら簡単に取れる）&lt;/p&gt;

&lt;p&gt;最近は読み込み時間が体感速度を表しているように思えない。各種SNSボタンのJSが大量に読み込まれるが、それらは非同期で読み込まれるために実際の読み込み時間と体感速度には大きな乖離が見られるし、何千pxという長大なページで2,3スクロールしないと見えないような画像が読み込み時間にカウントされるのはどうだろう。はたまたdomContentLoadedだったらどうだろうか、うーん、あんましフロント関係なくね？&lt;/p&gt;

&lt;p&gt;そんなこんなで現時点で一番有用な指標と個人的に考えているのが、WebPagetestで計測できる&lt;a href=&#34;https://github.com/t32k/webpagetest-doc-ja/blob/master/using-webpagetest/metrics/speed-index/index.md&#34;&gt;Speed Index&lt;/a&gt;だ。Speed Indexに関しても以前記事を書いた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://t32k.me/mol/log/webpagetest-5-minutes/&#34;&gt;WebPagetest in 5 minutes — MOL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;So how fast is fast enough? A Speed Index of under 1000. And for professionals that get there, they should shoot for delivering the critical-path view (above the fold) in the first 14Kb of the page. — Paul Irish&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Smashing Magazineの講演でも触れられていたが、やはりどれだけ速ければいいのかという問いに対して、&lt;a href=&#34;https://twitter.com/snookca/status/543210094431723520&#34;&gt;Web業界のベネディクト・カンバーバッチ&lt;/a&gt;である&lt;a href=&#34;https://twitter.com/paul_irish&#34;&gt;Paul Irish&lt;/a&gt;氏が言及していたようにSpeed Indexが1000以下になるのが望ましい。これは去年も来日してた時に言っていたのでGoogle様はそれを目標にしているのだろう。そうゆうわけでのクリティカル・パスの最適化である。&lt;/p&gt;

&lt;p&gt;Smashing Magazineでは&lt;a href=&#34;https://github.com/tkadlec/grunt-perfbudget&#34;&gt;grunt-perfbudget&lt;/a&gt;を使って、定期的にWebPagetestを回していたらしい（CLIからWPTを動かすにはAPI Keyが必要なので個別に作者に連絡しなければならない）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/mol/images/2014/12-24-fig06.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webpagetest.org/video/compare.php?tests=141223_RD_GJJ%2C141223_RX_G9D&amp;amp;thumbSize=200&amp;amp;ival=100&amp;amp;end=visual&#34;&gt;WebPagetest - Visual Comparison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回の改善によるSpeed Indexの変化だけど、GitHub Pagesでカスタムドメインしているため、どうしても最初にリダイレクトが入ってしまうせいで、改善前後のSpeed Indexは微減（2097 -&amp;gt; 1940）だが、Start Renderは1.8秒から1.6秒と確実に速くなっている。&lt;/p&gt;

&lt;p&gt;Smashing Magazineのケースでも一連の改善の結果、1000近くにまで削減することができたそうだ。その結果、『&lt;strong&gt;SmashingMagはサンパウロからEDGE回線で読むことができるただ一つのサイトだ&lt;/strong&gt;』と講演の最後にブラジルの読者からのツイートを誇らしげに紹介していたVitaly Friedman氏の笑顔が忘れられない。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:6a3d5e7bca1f2497d73d6b9fafc5cac0&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;そうゆうわけで、Smashing Magazineの改善ケースでやってること自体は特に目新しい物はないが、ひとつひとつのことを丁寧にしっかりやってる点が素晴らしいと思う。しかもSmashing Magazineのような長年運用している大規模かつ複雑なサイトでCritical CSSの対応などは相当めんどくさかったに違いない（もっと詳しく聞きたかった）。今回の簡単な静的ページであるプロフィールページの改善もめんどくさかったし。&lt;/p&gt;

&lt;p&gt;結局、山ほどあるパフォーマンス改善策に優先度を決め、ゴールを決め、フロントとバックエンドをまとめ、戦略をもってパフォーマンス改善できる人なんてそうそういないよね？てか、対象となる知識大杉、てか、Vitaly Friedman氏ハンパなくね？って思った。&lt;/p&gt;

&lt;p&gt;Smashing Magazineにはスーパーマンがいたけど、個人的にはもっと他のケースも知りたいというか、泥臭いのに共感したいと思っている。だって世の中そんなうまくいかないし、&lt;a href=&#34;http://httparchive.org/trends.php?s=Top1000&amp;amp;minlabel=Dec+15+2013&amp;amp;maxlabel=Dec+1+2014#bytesImg&amp;amp;reqImg&#34;&gt;テキスト主体で画像少なめのページでこれ速いだろうって言っても意味ねーし&lt;/a&gt;、世の中もっとゴテゴテしてるし複雑だ。この辺は緑の顔の緑の会社の人をチェックしていれば、いつか闇がにじみだしてくるのではと期待している。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://havelog.ayumusato.com/develop/performance/e637-web_performance_2014.html&#34;&gt;2014年のWebパフォーマンスふりかえり - 来年以降の期待etc ::ハブろぐ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;僕の来年の目標はやっぱり、Speed Indexの知名度が低いのも&lt;a href=&#34;http://www.webpagetest.org/&#34;&gt;WebPagetest.org&lt;/a&gt;の見た目がうさくさいのが原因だと思っているので、リニューアルデザインをプルリクしてあげたいと思う。たぶん。知らんけど。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GoアプリをHerokuにデプロイする</title>
      <link>http://localhost:1313/mol/log/go-on-heroku/</link>
      <pubDate>Tue, 23 Dec 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/go-on-heroku/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/heroku&#34;&gt;Heroku Advent Calendar 2014 - Qiita&lt;/a&gt; の23日目です、たぶん。&lt;/p&gt;

&lt;p&gt;最近、僕の周りの人らがGO!GO!うるさいので、ついつい僕もそそのかされてGo言語やりたいなーと思ったのです。&lt;a href=&#34;https://golang.org/doc/go1.4&#34;&gt;Go 1.4&lt;/a&gt;も出たしね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://go-tour-jp.appspot.com/#1&#34;&gt;A Tour of Go | Hello, 世界&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ひととおりチュートリアルはやってみたんですけど、やっぱりWeb上で動かしたいわけですよ。そうゆうわけで、Heroku上でGoアプリを動かしてみようと思います。&lt;/p&gt;

&lt;h2 id=&#34;go-on-heroku:6ed9a283e28d0a5f21113841e2c66222&#34;&gt;Go on Heroku&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://mmcgrana.github.io/2012/09/getting-started-with-go-on-heroku.html&#34;&gt;Getting Started with Go on Heroku&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まぁ、上記の記事を参考にしたらちゃんとGoアプリをHerokuで稼働させることができます。以下は自分の備忘録代わりということで。&lt;/p&gt;

&lt;h3 id=&#34;install-go:6ed9a283e28d0a5f21113841e2c66222&#34;&gt;Install Go&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/ymotongpoo/goenv&#34;&gt;goenv&lt;/a&gt;というGoのバージョン管理ツールもあるみたいだけど、初心者なので&lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;で入れることにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install go
$ go version
go version go1.3.3 darwin/amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;わーい、かんたん٩(๑❛ᴗ❛๑)۶&lt;/p&gt;

&lt;h3 id=&#34;go-environment:6ed9a283e28d0a5f21113841e2c66222&#34;&gt;Go Environment&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$GOPATH&lt;/code&gt;等を設定する。ここで指定したパス以下がGoのワークスペースとなる。お好きなシェルプロファイルに記述。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#39;export GOPATH=$HOME&#39; &amp;gt;&amp;gt; $HOME/.bash_profile
$ echo &#39;export PATH=$PATH:$GOPATH/bin&#39;  &amp;gt;&amp;gt; $HOME/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のようなディレクトリ構成で管理される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$GOPATH
├── bin（コンパイルしたバイナリファイル）
├── pkg（パッケージオブジェクトファイル）
└── src（Goの作業ソースファイル）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GitHub上に置かれているソースファイルは、 &lt;code&gt;~/src/github.com/{USER_NAME}/{REPOSITORY_NAME}&lt;/code&gt; みたいに管理される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://weblog.bulknews.net/post/89635306479/ghq-peco-percol&#34;&gt;ghq + peco/percol - Tatsuhiko Miyagawa&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webtech-walker.com/archive/2014/06/peco-ghq-gh-open.html&#34;&gt;peco、ghq、gh-openの組み合わせが捗る - Webtech Walker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だもんでghqの方もそっち合わせてpecoとか使うと捗るらしいよ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global ghq.root ~/src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ghqでgetしてきたリポジトリの保存先の設定。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/motemen/ghq&#34;&gt;motemen/ghq&lt;/a&gt;（Go言語製、リポジトリ管理ツール）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/peco/peco&#34;&gt;peco/peco&lt;/a&gt;（Go言語製、フィルタリングツール）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/typester/gh-open&#34;&gt;typester/gh-open&lt;/a&gt;（Go言語製、GitHubのレポジトリURLを開くツール）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まとめると、上みたいな感じ。世の中便利ですな。&lt;/p&gt;

&lt;p&gt;ちなみに、Intellij IDEAでGolangのプラグイン（0.9.15）を入れると、ちゃんと指定しているのにもかかわらず、$GOROOTと$GOPATH設定しろや、(ﾟДﾟ)ｺﾞﾙｧ!!って言われるけど、0.9.16-alpha入れると治った٩(๑❛ᴗ❛๑)۶&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-lang-plugin-org/go-lang-idea-plugin/releases&#34;&gt;Releases · go-lang-plugin-org/go-lang-idea-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;んで、$GOROOTは設定しなくてもいいらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwmt27.net/index.php/2013/06/14/you-dont-need-to-set-goroot-really/&#34;&gt;あなたがGOROOTを本当に設定しなくていい理由 | Androg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go-web-app:6ed9a283e28d0a5f21113841e2c66222&#34;&gt;Go Web App&lt;/h3&gt;

&lt;p&gt;話が逸れたので戻すと&lt;code&gt;~/src/demoapp&lt;/code&gt;のディレクトリを作ってそこで作業する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir $GOPATH/src/demoapp
$ cd $GOPATH/src/demoapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;web.go&lt;/code&gt;のファイルを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// web.go
package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;os&amp;quot;
)

func main() {
    http.HandleFunc(&amp;quot;/&amp;quot;, hello)
    fmt.Println(&amp;quot;listening...&amp;quot;)
    err := http.ListenAndServe(&amp;quot;:&amp;quot;+os.Getenv(&amp;quot;PORT&amp;quot;), nil)
    if err != nil {
      panic(err)
    }
}

func hello(res http.ResponseWriter, req *http.Request) {
    fmt.Fprintln(res, &amp;quot;hello, world&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んで、&lt;code&gt;go get&lt;/code&gt;（コンパイル、インストール）して、demoappをバイナリで動かすようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PORT=5000 demoapp
$ open http://localhost:5000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ローカル環境で動いてることを確認する。&lt;/p&gt;

&lt;h3 id=&#34;heroku-setup:6ed9a283e28d0a5f21113841e2c66222&#34;&gt;Heroku Setup&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;heroku login&lt;/code&gt;とかしとく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#39;web: demoapp&#39; &amp;gt; Procfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Procfileを作る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get github.com/kr/godep
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Godepという依存性の管理ツールをインスコ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ godep save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;依存性を保存。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ heroku create --buildpack https://github.com/kr/heroku-buildpack-go.git
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kr/heroku-buildpack-go&#34;&gt;kr/heroku-buildpack-go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GoのHeroku Buildpackを使ってHerokuアプリを作成する。ちなみに、BuildpackとはHeroku上でアプリをコンパイルするためのスクリプトで、Goなどのデフォルトで対応していない言語は&lt;a href=&#34;https://devcenter.heroku.com/articles/third-party-buildpacks&#34;&gt;Third-PartyのBuildpack&lt;/a&gt;を使ってデプロイすることになる。だもんで、Go言語以外も動かせる。&lt;/p&gt;

&lt;p&gt;Buildpackを使ってアプリで来たら、&lt;code&gt;git push heroku master&lt;/code&gt;してデプロイして完了！&lt;/p&gt;

&lt;p&gt;わーい、できたー٩(๑❛ᴗ❛๑)۶&lt;/p&gt;

&lt;h2 id=&#34;a-fast-heroku-cli-client:6ed9a283e28d0a5f21113841e2c66222&#34;&gt;A fast Heroku CLI client&lt;/h2&gt;

&lt;p&gt;ちなみに、Go言語製のCLIツールが多いのにお気づきだろうか。なんか速いらしいね。ってことで、&lt;code&gt;heroku&lt;/code&gt;コマンドも&lt;code&gt;hk&lt;/code&gt;というGoで作らたコマンドがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/heroku/hk&#34;&gt;heroku/hk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まだBeta版でherokuにあってhkに無いコマンドもありますが。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ L=/usr/local/bin/hk &amp;amp;&amp;amp; curl -sL -A &amp;quot;`uname -sp`&amp;quot; https://hk.heroku.com/hk.gz | zcat &amp;gt;$L &amp;amp;&amp;amp; chmod +x $L
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インスコ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;t32k at MBP in ~
$ time heroku apps &amp;gt;/dev/null
real	0m1.980s
user	0m0.711s
sys	0m0.064s

t32k at MBP in ~
$ time hk apps &amp;gt;/dev/null
real	0m0.724s
user	0m0.076s
sys	0m0.019s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おぉー、桁が違うぜ！ってことで、速いもの好きなあなたはインストールしてみてはどうでしょうか。&lt;/p&gt;

&lt;p&gt;僕もGoで作ったCLIツール作りたい٩(๑❛ᴗ❛๑)۶&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Heroku Dropbox Syncで実現するWeb開発の未来</title>
      <link>http://localhost:1313/mol/log/heroku-dropbox-sync/</link>
      <pubDate>Sat, 13 Dec 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/mol/log/heroku-dropbox-sync/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/heroku&#34;&gt;Heroku Advent Calendar 2014&lt;/a&gt;の13日目の記事です。&lt;/p&gt;

&lt;p&gt;2014年11月に&lt;a href=&#34;https://blog.heroku.com/archives/2014/11/19/announcing_beta_dropbox_sync&#34;&gt;HerokuからDropbox Sync機能のアナウンス（Beta版）&lt;/a&gt;がありました。今日はこれを使ってみようと思います。&lt;/p&gt;

&lt;p&gt;&lt;small&gt;この記事はBeta機能について解説しています。機能に関しては変更の可能性があります。&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&#34;デザイナーとデプロイ:b7480bac813dd1dc3bd7cb37aec5cb78&#34;&gt;デザイナーとデプロイ&lt;/h2&gt;

&lt;p&gt;まず先に私とHerokuと言えば、&lt;a href=&#34;http://www.stylestats.org/&#34;&gt;StyleStats&lt;/a&gt;というCSS解析ツールをHeroku上で動かしています。私は元はWebデザイナーでしたので、つい最近まで『デプロイ？なにそれ？おいしいの？』って感じでしたが、&lt;code&gt;git push heroku master&lt;/code&gt;でデプロイできるHerokuさんのおかげで、こんな私でもWebアプリを稼働・運用していけています。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;配備する、配置する、展開する、配置につく、などの意味を持つ英単語。
ソフトウェアの分野で、開発したソフトウェアを利用できるように実際の運用環境に展開することをデプロイということがある。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://e-words.jp/w/E38387E38397E383ADE382A4.html&#34;&gt;デプロイとは 【 deploy 】： IT用語辞典&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とはいえ、純粋なるWebデザイナーさんがGitコマンドを使いこなし黒い画面から&lt;code&gt;git push heroku master&lt;/code&gt;とタッターンッ！！と軽快にデプロイする姿を見れるのはまだ先かもしれません。&lt;/p&gt;

&lt;p&gt;Herokuにデプロイすることに関して言えば、Gitコマンドを使いこなす必要はなく最低限のコマンドを覚えるだけですし、黒い画面も使わなくてもGUIアプリを使えばよいわけですが、やっぱりGitを使うということには見えない大きな壁があるように個人的には考えています。&lt;/p&gt;

&lt;p&gt;そうゆうわけで、Gitを使わないユーザーにもデプロイの手段を提供するのが、今回のDropbox Sync機能です。その名の通り、Dropboxを通して、Web上からデプロイできる機能です。&lt;/p&gt;

&lt;h2 id=&#34;heroku-dropbox-syncの使い方:b7480bac813dd1dc3bd7cb37aec5cb78&#34;&gt;Heroku Dropbox Syncの使い方&lt;/h2&gt;

&lt;p&gt;Dropboxであれば、デザイナーさんもよく使ってますよね、デザインマテリアルの保存とか、それこそDropboxでバージョン管理してたりとか、デザイナーさんにとってDropboxがGitみたいな位置づけかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/mol/images/2014/12-13-fig01.jpg&#34; alt=&#34;Heroku Dashboard&#34; /&gt;
&lt;br /&gt;
使い方はすごく簡単です。Herokuアカウントとか基本的なセッティングは終わってる前提で話します。まず、&lt;a href=&#34;https://dashboard.heroku.com/apps&#34;&gt;Heroku Dashboard&lt;/a&gt;で新規Appを作成して（ここではt32k-drop-sync）、Codeタブを選択してその下部に[Connect to Dropbox]のボタンがありますので、そこをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/mol/images/2014/12-13-fig02.jpg&#34; alt=&#34;Authorize&#34; /&gt;
&lt;br /&gt;
Dropboxから確認を求められる画面になるので許可しましょう(Dropboxにログインしてなかったらまずログイン画面がでてきます)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/mol/images/2014/12-13-fig03.jpg&#34; alt=&#34;Finder&#34; /&gt;
&lt;br /&gt;
許可するとローカルマシンの中に&lt;code&gt;Dropbox/アプリ/Heoku/t32k-drop-sync/&lt;/code&gt;というフォルダが作成されているのが確認できます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;アプリ&lt;/code&gt;はローカライズ部分なので、人によっては&lt;code&gt;Dropbox/Apps/Heroku/{APP-NAME}&lt;/code&gt;って感じのディレクトリになってるかと思います。&lt;/p&gt;

&lt;p&gt;あとはここのディレクトリにアプリを作成していくだけです。試しにRailsアプリを作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/mol/images/2014/12-13-fig05.png&#34; alt=&#34;Deploy&#34; /&gt;
&lt;br /&gt;
ひととおりの作業が終わったら、またHeroku Dashboardのt32k-drop-syncアプリのCodeタブの下部にデプロイボタンがあります。コミットメッセージを記入します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/mol/images/2014/12-13-fig04.png&#34; alt=&#34;Deploy&#34; /&gt;
&lt;br /&gt;
うまくいけばこのようにチェックされます。というわけで、Dropbox Syncって名前だけど、Dropboxがファイルを同期するたびにデプロイが実行されるわけじゃないです。ちゃんとWeb UI上からデプロイボタンを押さないといけません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/mol/images/2014/12-13-fig06.png&#34; alt=&#34;Rails new&#34; /&gt;
&lt;br /&gt;
とりま、できました。&lt;/p&gt;

&lt;h2 id=&#34;heroku-dropbox-syncの使いドコロ:b7480bac813dd1dc3bd7cb37aec5cb78&#34;&gt;Heroku Dropbox Syncの使いドコロ&lt;/h2&gt;

&lt;p&gt;HerokuアプリをGitを使わずにDropbox Syncで作成できましたが、実際のところ、Herokuに新規アプリをデプロイするときにはアプリケーション側でいろいろ設定しなきゃいけないことが多いので、デザイナーがひとりで完遂できるかというと疑問ですが、Dropbox Syncはなにも新規アプリでDropbox Syncを有効にしたアプリだけに適用されるわけではないです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/mol/images/2014/12-13-fig07.png&#34; alt=&#34;2Ways&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Gitで管理している既存アプリでもDropbox Sync機能を有効にすることができます。使い方は上記と同じです。また、デザイナーが修正したファイルをDropbox Syncからデプロイした場合、Git管理しているエンジニアは次にデプロイしたいときは&lt;code&gt;git pull heroku master&lt;/code&gt;をしてデザイナーが行った修正の差分をマージしておかなければなりません。その逆にエンジニアが&lt;code&gt;git push heroku master&lt;/code&gt;でデプロイした場合は自動的にデザイナー側のDropboxが同期します。&lt;/p&gt;

&lt;p&gt;極端な話、文言修正だけだったら、iPadにDropboxアプリ入れて、Dropbox連携のテキストエディタで編集して、Safariからデプロイボタン押せばiPadだけでデブロイが可能となります。&lt;/p&gt;

&lt;p&gt;まぁそれ自体には意味は無いですけど、デプロイの敷居はだいぶ下がったのではないかなと思います。ちょっとデザイナーさんにバナー差し替えを依頼したいときなど、編集してaddしてcommitしてpushしてもらうより、Dropbox内のファイルいじってもらって、終わったらエンジニア側でデプロイボタン押せば圧倒的に説明コストが低くて済みます。&lt;/p&gt;

&lt;p&gt;しかしコミットの粒度を考えると、こまめにGitでコミットしておいたほうがなにかと良いので、Dropbox Sync機能はその点まだクリアできていない問題だけど、非エンジニアのデプロイの敷居を下げるという意味ではすごく良いアプローチだと思うし、それで興味をもった人が今度はGitからデプロイ！って段階が踏めるようになったのは良い流れじゃないかなと個人的には感じます。&lt;/p&gt;

&lt;p&gt;そういうわけで、エンジニアとデザイナー仲良くデプロイしていきましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/dropbox-sync&#34;&gt;Dropbox Sync | Heroku Dev Center&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>